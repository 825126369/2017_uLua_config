// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_landlord_net_human_def.proto

#ifndef PROTOBUF_game_5flandlord_5fnet_5fhuman_5fdef_2eproto__INCLUDED
#define PROTOBUF_game_5flandlord_5fnet_5fhuman_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace game_landlord_net_human_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

class card_Info;
class card_Info_1;
class desk_award_Info;
class player_info;
class room_info;
class invitation_info;

enum e_server_msg_type {
  e_mst_start_c2l = 10000,
  e_mst_c2l_enter_room = 10001,
  e_mst_c2l_get_room_scene_info = 10002,
  e_mst_c2l_check_state = 10003,
  e_mst_c2l_leave_room = 10004,
  e_mst_c2l_rob_landlord = 10005,
  e_mst_c2l_playhand = 10006,
  e_mst_c2l_Hang = 10008,
  e_mst_c2l_SystemTalk = 10009,
  e_mst_c2l_roomlist = 10010,
  e_mst_c2l_add_robot = 10011,
  e_mst_c2l_kich_player = 10012,
  e_mst_c2l_or_prepare = 10013,
  e_mst_c2l_join_player_list = 10014,
  e_mst_c2l_join_room = 10015,
  e_mst_c2l_or_agree_join_room = 10016,
  e_mst_c2l_create_room = 10017,
  e_mst_c2l_change_desk = 10019,
  e_mst_start_l2c = 15000,
  e_mst_l2c_enter_room = 15001,
  e_mst_l2c_get_room_scene_info = 15002,
  e_mst_l2c_check_state = 15003,
  e_mst_l2c_leave_room = 15004,
  e_mst_l2c_Hang = 15006,
  e_mst_l2c_roomlist = 15007,
  e_mst_l2c_add_robot = 15008,
  e_mst_l2c_kich_player = 15009,
  e_mst_l2c_join_player_list_result = 15010,
  e_mst_l2c_join_room_result = 15011,
  e_mst_l2c_or_agree_join_room_result = 15012,
  e_mst_l2c_create_room = 15013,
  e_mst_l2c_change_desk = 15015,
  e_mst_l2c_notice_startgame = 15101,
  e_mst_l2c_notice_playhand = 15102,
  e_mst_l2c_notice_rob_landlord = 15103,
  e_mst_l2c_notice_winlose = 15104,
  e_mst_l2c_notice_rob_landlord_result = 15105,
  e_mst_l2c_notice_who_playhand = 15106,
  e_mst_l2c_notice_SystemTalk = 15107,
  e_mst_l2c_notice_room_enter_leave_info = 15108,
  e_mst_l2c_notice_room_prepare_info = 15109,
  e_mst_l2c_notice_room_change_info = 15110,
  e_mst_l2c_notice_invite_room_list = 15111,
  e_mst_l2c_notice_who_is_roomcreator = 15112,
  e_mst_clend_index = 20000
};
bool e_server_msg_type_IsValid(int value);
const e_server_msg_type e_server_msg_type_MIN = e_mst_start_c2l;
const e_server_msg_type e_server_msg_type_MAX = e_mst_clend_index;
const int e_server_msg_type_ARRAYSIZE = e_server_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor();
inline const ::std::string& e_server_msg_type_Name(e_server_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_msg_type_descriptor(), value);
}
inline bool e_server_msg_type_Parse(
    const ::std::string& name, e_server_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_msg_type>(
    e_server_msg_type_descriptor(), name, value);
}
enum e_server_error_code {
  e_error_code_success = 1,
  e_error_code_failed = 2,
  e_error_code_not_enough_money = 3
};
bool e_server_error_code_IsValid(int value);
const e_server_error_code e_server_error_code_MIN = e_error_code_success;
const e_server_error_code e_server_error_code_MAX = e_error_code_not_enough_money;
const int e_server_error_code_ARRAYSIZE = e_server_error_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_error_code_descriptor();
inline const ::std::string& e_server_error_code_Name(e_server_error_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_error_code_descriptor(), value);
}
inline bool e_server_error_code_Parse(
    const ::std::string& name, e_server_error_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_error_code>(
    e_server_error_code_descriptor(), name, value);
}
enum e_game_state {
  e_game_state_none = 0,
  e_game_state_matching = 1,
  e_game_state_startgame = 2,
  e_game_state_sendcarding = 3,
  e_game_state_robLandlore = 4,
  e_game_state_playhand = 5,
  e_game_state_award = 6
};
bool e_game_state_IsValid(int value);
const e_game_state e_game_state_MIN = e_game_state_none;
const e_game_state e_game_state_MAX = e_game_state_award;
const int e_game_state_ARRAYSIZE = e_game_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor();
inline const ::std::string& e_game_state_Name(e_game_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_game_state_descriptor(), value);
}
inline bool e_game_state_Parse(
    const ::std::string& name, e_game_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_game_state>(
    e_game_state_descriptor(), name, value);
}
enum e_player_game_state {
  e_player_game_state_none = 0,
  e_player_game_state_matching = 1,
  e_player_game_state_sendcarding = 2,
  e_player_game_state_robLandlord = 3,
  e_player_game_state_other_robLandlord = 4,
  e_player_game_state_playhanding = 5,
  e_player_game_state_other_playhanding = 6,
  e_player_game_state_awarding = 7
};
bool e_player_game_state_IsValid(int value);
const e_player_game_state e_player_game_state_MIN = e_player_game_state_none;
const e_player_game_state e_player_game_state_MAX = e_player_game_state_awarding;
const int e_player_game_state_ARRAYSIZE = e_player_game_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_player_game_state_descriptor();
inline const ::std::string& e_player_game_state_Name(e_player_game_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_player_game_state_descriptor(), value);
}
inline bool e_player_game_state_Parse(
    const ::std::string& name, e_player_game_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_player_game_state>(
    e_player_game_state_descriptor(), name, value);
}
// ===================================================================

class card_Info : public ::google::protobuf::Message {
 public:
  card_Info();
  virtual ~card_Info();

  card_Info(const card_Info& from);

  inline card_Info& operator=(const card_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const card_Info& default_instance();

  void Swap(card_Info* other);

  // implements Message ----------------------------------------------

  card_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const card_Info& from);
  void MergeFrom(const card_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deskId = 1;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 1;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.card_Info)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

  void InitAsDefaultInstance();
  static card_Info* default_instance_;
};
// -------------------------------------------------------------------

class card_Info_1 : public ::google::protobuf::Message {
 public:
  card_Info_1();
  virtual ~card_Info_1();

  card_Info_1(const card_Info_1& from);

  inline card_Info_1& operator=(const card_Info_1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const card_Info_1& default_instance();

  void Swap(card_Info_1* other);

  // implements Message ----------------------------------------------

  card_Info_1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const card_Info_1& from);
  void MergeFrom(const card_Info_1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deskId = 1;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 1;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 cards_count = 2;
  inline bool has_cards_count() const;
  inline void clear_cards_count();
  static const int kCardsCountFieldNumber = 2;
  inline ::google::protobuf::int32 cards_count() const;
  inline void set_cards_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.card_Info_1)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_cards_count();
  inline void clear_has_cards_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 cards_count_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

  void InitAsDefaultInstance();
  static card_Info_1* default_instance_;
};
// -------------------------------------------------------------------

class desk_award_Info : public ::google::protobuf::Message {
 public:
  desk_award_Info();
  virtual ~desk_award_Info();

  desk_award_Info(const desk_award_Info& from);

  inline desk_award_Info& operator=(const desk_award_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const desk_award_Info& default_instance();

  void Swap(desk_award_Info* other);

  // implements Message ----------------------------------------------

  desk_award_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const desk_award_Info& from);
  void MergeFrom(const desk_award_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deskId = 1;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 1;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 win_count = 2;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 2;
  inline ::google::protobuf::int32 win_count() const;
  inline void set_win_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.desk_award_Info)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_win_count();
  inline void clear_has_win_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 win_count_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

  void InitAsDefaultInstance();
  static desk_award_Info* default_instance_;
};
// -------------------------------------------------------------------

class player_info : public ::google::protobuf::Message {
 public:
  player_info();
  virtual ~player_info();

  player_info(const player_info& from);

  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_info& default_instance();

  void Swap(player_info* other);

  // implements Message ----------------------------------------------

  player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_info& from);
  void MergeFrom(const player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_nickname = 2;
  inline bool has_player_nickname() const;
  inline void clear_player_nickname();
  static const int kPlayerNicknameFieldNumber = 2;
  inline const ::std::string& player_nickname() const;
  inline void set_player_nickname(const ::std::string& value);
  inline void set_player_nickname(const char* value);
  inline void set_player_nickname(const char* value, size_t size);
  inline ::std::string* mutable_player_nickname();
  inline ::std::string* release_player_nickname();
  inline void set_allocated_player_nickname(::std::string* player_nickname);

  // optional int32 player_head_frame = 3;
  inline bool has_player_head_frame() const;
  inline void clear_player_head_frame();
  static const int kPlayerHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 player_head_frame() const;
  inline void set_player_head_frame(::google::protobuf::int32 value);

  // optional string player_head_custom = 4;
  inline bool has_player_head_custom() const;
  inline void clear_player_head_custom();
  static const int kPlayerHeadCustomFieldNumber = 4;
  inline const ::std::string& player_head_custom() const;
  inline void set_player_head_custom(const ::std::string& value);
  inline void set_player_head_custom(const char* value);
  inline void set_player_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_player_head_custom();
  inline ::std::string* release_player_head_custom();
  inline void set_allocated_player_head_custom(::std::string* player_head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 player_vip_lv = 7;
  inline bool has_player_vip_lv() const;
  inline void clear_player_vip_lv();
  static const int kPlayerVipLvFieldNumber = 7;
  inline ::google::protobuf::int32 player_vip_lv() const;
  inline void set_player_vip_lv(::google::protobuf::int32 value);

  // optional int32 deskId = 8;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 8;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional bool orPrepare = 9;
  inline bool has_orprepare() const;
  inline void clear_orprepare();
  static const int kOrPrepareFieldNumber = 9;
  inline bool orprepare() const;
  inline void set_orprepare(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_nickname();
  inline void clear_has_player_nickname();
  inline void set_has_player_head_frame();
  inline void clear_has_player_head_frame();
  inline void set_has_player_head_custom();
  inline void clear_has_player_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_player_vip_lv();
  inline void clear_has_player_vip_lv();
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_orprepare();
  inline void clear_has_orprepare();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* player_nickname_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_head_frame_;
  ::std::string* player_head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 player_vip_lv_;
  ::google::protobuf::int32 deskid_;
  bool orprepare_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

  void InitAsDefaultInstance();
  static player_info* default_instance_;
};
// -------------------------------------------------------------------

class room_info : public ::google::protobuf::Message {
 public:
  room_info();
  virtual ~room_info();

  room_info(const room_info& from);

  inline room_info& operator=(const room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_info& default_instance();

  void Swap(room_info* other);

  // implements Message ----------------------------------------------

  room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_info& from);
  void MergeFrom(const room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string roomName = 2;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional int32 player_count = 3;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 3;
  inline ::google::protobuf::int32 player_count() const;
  inline void set_player_count(::google::protobuf::int32 value);

  // optional int32 room_state = 4;
  inline bool has_room_state() const;
  inline void clear_room_state();
  static const int kRoomStateFieldNumber = 4;
  inline ::google::protobuf::int32 room_state() const;
  inline void set_room_state(::google::protobuf::int32 value);

  // optional bool orNeedPassword = 5;
  inline bool has_orneedpassword() const;
  inline void clear_orneedpassword();
  static const int kOrNeedPasswordFieldNumber = 5;
  inline bool orneedpassword() const;
  inline void set_orneedpassword(bool value);

  // optional bool orShuffle = 6;
  inline bool has_orshuffle() const;
  inline void clear_orshuffle();
  static const int kOrShuffleFieldNumber = 6;
  inline bool orshuffle() const;
  inline void set_orshuffle(bool value);

  // optional string password = 7;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 7;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional int32 room_creator = 8;
  inline bool has_room_creator() const;
  inline void clear_room_creator();
  static const int kRoomCreatorFieldNumber = 8;
  inline ::google::protobuf::int32 room_creator() const;
  inline void set_room_creator(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.room_info)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_player_count();
  inline void clear_has_player_count();
  inline void set_has_room_state();
  inline void clear_has_room_state();
  inline void set_has_orneedpassword();
  inline void clear_has_orneedpassword();
  inline void set_has_orshuffle();
  inline void clear_has_orshuffle();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_room_creator();
  inline void clear_has_room_creator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomname_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 player_count_;
  ::google::protobuf::int32 room_state_;
  bool orneedpassword_;
  bool orshuffle_;
  ::std::string* password_;
  ::google::protobuf::int32 room_creator_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

  void InitAsDefaultInstance();
  static room_info* default_instance_;
};
// -------------------------------------------------------------------

class invitation_info : public ::google::protobuf::Message {
 public:
  invitation_info();
  virtual ~invitation_info();

  invitation_info(const invitation_info& from);

  inline invitation_info& operator=(const invitation_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invitation_info& default_instance();

  void Swap(invitation_info* other);

  // implements Message ----------------------------------------------

  invitation_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invitation_info& from);
  void MergeFrom(const invitation_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.player_info senderInfo = 1;
  inline bool has_senderinfo() const;
  inline void clear_senderinfo();
  static const int kSenderInfoFieldNumber = 1;
  inline const ::game_landlord_net_human_protocol::player_info& senderinfo() const;
  inline ::game_landlord_net_human_protocol::player_info* mutable_senderinfo();
  inline ::game_landlord_net_human_protocol::player_info* release_senderinfo();
  inline void set_allocated_senderinfo(::game_landlord_net_human_protocol::player_info* senderinfo);

  // optional int32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string roomName = 3;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.invitation_info)
 private:
  inline void set_has_senderinfo();
  inline void clear_has_senderinfo();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_landlord_net_human_protocol::player_info* senderinfo_;
  ::std::string* roomname_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();

  void InitAsDefaultInstance();
  static invitation_info* default_instance_;
};
// ===================================================================


// ===================================================================

// card_Info

// optional int32 deskId = 1;
inline bool card_Info::has_deskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void card_Info::set_has_deskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void card_Info::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void card_Info::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 card_Info::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.card_Info.deskId)
  return deskid_;
}
inline void card_Info::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.card_Info.deskId)
}

// repeated int32 cards = 2;
inline int card_Info::cards_size() const {
  return cards_.size();
}
inline void card_Info::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 card_Info::cards(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.card_Info.cards)
  return cards_.Get(index);
}
inline void card_Info::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.card_Info.cards)
}
inline void card_Info::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.card_Info.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
card_Info::cards() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.card_Info.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
card_Info::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.card_Info.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// card_Info_1

// optional int32 deskId = 1;
inline bool card_Info_1::has_deskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void card_Info_1::set_has_deskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void card_Info_1::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void card_Info_1::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 card_Info_1::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.card_Info_1.deskId)
  return deskid_;
}
inline void card_Info_1::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.card_Info_1.deskId)
}

// optional int32 cards_count = 2;
inline bool card_Info_1::has_cards_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void card_Info_1::set_has_cards_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void card_Info_1::clear_has_cards_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void card_Info_1::clear_cards_count() {
  cards_count_ = 0;
  clear_has_cards_count();
}
inline ::google::protobuf::int32 card_Info_1::cards_count() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.card_Info_1.cards_count)
  return cards_count_;
}
inline void card_Info_1::set_cards_count(::google::protobuf::int32 value) {
  set_has_cards_count();
  cards_count_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.card_Info_1.cards_count)
}

// -------------------------------------------------------------------

// desk_award_Info

// optional int32 deskId = 1;
inline bool desk_award_Info::has_deskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void desk_award_Info::set_has_deskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void desk_award_Info::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void desk_award_Info::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 desk_award_Info::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.desk_award_Info.deskId)
  return deskid_;
}
inline void desk_award_Info::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.desk_award_Info.deskId)
}

// optional int32 win_count = 2;
inline bool desk_award_Info::has_win_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void desk_award_Info::set_has_win_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void desk_award_Info::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void desk_award_Info::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 desk_award_Info::win_count() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.desk_award_Info.win_count)
  return win_count_;
}
inline void desk_award_Info::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.desk_award_Info.win_count)
}

// -------------------------------------------------------------------

// player_info

// optional int32 player_id = 1;
inline bool player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 player_info::player_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_id)
  return player_id_;
}
inline void player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_id)
}

// optional string player_nickname = 2;
inline bool player_info::has_player_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_info::set_has_player_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_info::clear_has_player_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_info::clear_player_nickname() {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_->clear();
  }
  clear_has_player_nickname();
}
inline const ::std::string& player_info::player_nickname() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_nickname)
  return *player_nickname_;
}
inline void player_info::set_player_nickname(const ::std::string& value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_nickname)
}
inline void player_info::set_player_nickname(const char* value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.player_info.player_nickname)
}
inline void player_info::set_player_nickname(const char* value, size_t size) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.player_info.player_nickname)
}
inline ::std::string* player_info::mutable_player_nickname() {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.player_info.player_nickname)
  return player_nickname_;
}
inline ::std::string* player_info::release_player_nickname() {
  clear_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_nickname_;
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void player_info::set_allocated_player_nickname(::std::string* player_nickname) {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_nickname_;
  }
  if (player_nickname) {
    set_has_player_nickname();
    player_nickname_ = player_nickname;
  } else {
    clear_has_player_nickname();
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.player_info.player_nickname)
}

// optional int32 player_head_frame = 3;
inline bool player_info::has_player_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_info::set_has_player_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_info::clear_has_player_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_info::clear_player_head_frame() {
  player_head_frame_ = 0;
  clear_has_player_head_frame();
}
inline ::google::protobuf::int32 player_info::player_head_frame() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_head_frame)
  return player_head_frame_;
}
inline void player_info::set_player_head_frame(::google::protobuf::int32 value) {
  set_has_player_head_frame();
  player_head_frame_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_head_frame)
}

// optional string player_head_custom = 4;
inline bool player_info::has_player_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_info::set_has_player_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_info::clear_has_player_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_info::clear_player_head_custom() {
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_->clear();
  }
  clear_has_player_head_custom();
}
inline const ::std::string& player_info::player_head_custom() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_head_custom)
  return *player_head_custom_;
}
inline void player_info::set_player_head_custom(const ::std::string& value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_head_custom)
}
inline void player_info::set_player_head_custom(const char* value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.player_info.player_head_custom)
}
inline void player_info::set_player_head_custom(const char* value, size_t size) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.player_info.player_head_custom)
}
inline ::std::string* player_info::mutable_player_head_custom() {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.player_info.player_head_custom)
  return player_head_custom_;
}
inline ::std::string* player_info::release_player_head_custom() {
  clear_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_head_custom_;
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void player_info::set_allocated_player_head_custom(::std::string* player_head_custom) {
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_head_custom_;
  }
  if (player_head_custom) {
    set_has_player_head_custom();
    player_head_custom_ = player_head_custom;
  } else {
    clear_has_player_head_custom();
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.player_info.player_head_custom)
}

// optional int64 player_gold = 5;
inline bool player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 player_info::player_gold() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_gold)
  return player_gold_;
}
inline void player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_gold)
}

// optional int32 player_sex = 6;
inline bool player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 player_info::player_sex() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_sex)
  return player_sex_;
}
inline void player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_sex)
}

// optional int32 player_vip_lv = 7;
inline bool player_info::has_player_vip_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void player_info::set_has_player_vip_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void player_info::clear_has_player_vip_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void player_info::clear_player_vip_lv() {
  player_vip_lv_ = 0;
  clear_has_player_vip_lv();
}
inline ::google::protobuf::int32 player_info::player_vip_lv() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.player_vip_lv)
  return player_vip_lv_;
}
inline void player_info::set_player_vip_lv(::google::protobuf::int32 value) {
  set_has_player_vip_lv();
  player_vip_lv_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.player_vip_lv)
}

// optional int32 deskId = 8;
inline bool player_info::has_deskid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void player_info::set_has_deskid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void player_info::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void player_info::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 player_info::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.deskId)
  return deskid_;
}
inline void player_info::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.deskId)
}

// optional bool orPrepare = 9;
inline bool player_info::has_orprepare() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void player_info::set_has_orprepare() {
  _has_bits_[0] |= 0x00000100u;
}
inline void player_info::clear_has_orprepare() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void player_info::clear_orprepare() {
  orprepare_ = false;
  clear_has_orprepare();
}
inline bool player_info::orprepare() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.player_info.orPrepare)
  return orprepare_;
}
inline void player_info::set_orprepare(bool value) {
  set_has_orprepare();
  orprepare_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.player_info.orPrepare)
}

// -------------------------------------------------------------------

// room_info

// optional int32 room_id = 1;
inline bool room_info::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_info::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void room_info::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void room_info::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 room_info::room_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.room_id)
  return room_id_;
}
inline void room_info::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.room_id)
}

// optional string roomName = 2;
inline bool room_info::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_info::set_has_roomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void room_info::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void room_info::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& room_info::roomname() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.roomName)
  return *roomname_;
}
inline void room_info::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.roomName)
}
inline void room_info::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.room_info.roomName)
}
inline void room_info::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.room_info.roomName)
}
inline ::std::string* room_info::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.room_info.roomName)
  return roomname_;
}
inline ::std::string* room_info::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void room_info::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.room_info.roomName)
}

// optional int32 player_count = 3;
inline bool room_info::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void room_info::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void room_info::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void room_info::clear_player_count() {
  player_count_ = 0;
  clear_has_player_count();
}
inline ::google::protobuf::int32 room_info::player_count() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.player_count)
  return player_count_;
}
inline void room_info::set_player_count(::google::protobuf::int32 value) {
  set_has_player_count();
  player_count_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.player_count)
}

// optional int32 room_state = 4;
inline bool room_info::has_room_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void room_info::set_has_room_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void room_info::clear_has_room_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void room_info::clear_room_state() {
  room_state_ = 0;
  clear_has_room_state();
}
inline ::google::protobuf::int32 room_info::room_state() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.room_state)
  return room_state_;
}
inline void room_info::set_room_state(::google::protobuf::int32 value) {
  set_has_room_state();
  room_state_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.room_state)
}

// optional bool orNeedPassword = 5;
inline bool room_info::has_orneedpassword() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void room_info::set_has_orneedpassword() {
  _has_bits_[0] |= 0x00000010u;
}
inline void room_info::clear_has_orneedpassword() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void room_info::clear_orneedpassword() {
  orneedpassword_ = false;
  clear_has_orneedpassword();
}
inline bool room_info::orneedpassword() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.orNeedPassword)
  return orneedpassword_;
}
inline void room_info::set_orneedpassword(bool value) {
  set_has_orneedpassword();
  orneedpassword_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.orNeedPassword)
}

// optional bool orShuffle = 6;
inline bool room_info::has_orshuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void room_info::set_has_orshuffle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void room_info::clear_has_orshuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void room_info::clear_orshuffle() {
  orshuffle_ = false;
  clear_has_orshuffle();
}
inline bool room_info::orshuffle() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.orShuffle)
  return orshuffle_;
}
inline void room_info::set_orshuffle(bool value) {
  set_has_orshuffle();
  orshuffle_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.orShuffle)
}

// optional string password = 7;
inline bool room_info::has_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void room_info::set_has_password() {
  _has_bits_[0] |= 0x00000040u;
}
inline void room_info::clear_has_password() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void room_info::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& room_info::password() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.password)
  return *password_;
}
inline void room_info::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.password)
}
inline void room_info::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.room_info.password)
}
inline void room_info::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.room_info.password)
}
inline ::std::string* room_info::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.room_info.password)
  return password_;
}
inline ::std::string* room_info::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void room_info::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.room_info.password)
}

// optional int32 room_creator = 8;
inline bool room_info::has_room_creator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void room_info::set_has_room_creator() {
  _has_bits_[0] |= 0x00000080u;
}
inline void room_info::clear_has_room_creator() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void room_info::clear_room_creator() {
  room_creator_ = 0;
  clear_has_room_creator();
}
inline ::google::protobuf::int32 room_info::room_creator() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.room_info.room_creator)
  return room_creator_;
}
inline void room_info::set_room_creator(::google::protobuf::int32 value) {
  set_has_room_creator();
  room_creator_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.room_info.room_creator)
}

// -------------------------------------------------------------------

// invitation_info

// optional .game_landlord_net_human_protocol.player_info senderInfo = 1;
inline bool invitation_info::has_senderinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invitation_info::set_has_senderinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invitation_info::clear_has_senderinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invitation_info::clear_senderinfo() {
  if (senderinfo_ != NULL) senderinfo_->::game_landlord_net_human_protocol::player_info::Clear();
  clear_has_senderinfo();
}
inline const ::game_landlord_net_human_protocol::player_info& invitation_info::senderinfo() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.invitation_info.senderInfo)
  return senderinfo_ != NULL ? *senderinfo_ : *default_instance_->senderinfo_;
}
inline ::game_landlord_net_human_protocol::player_info* invitation_info::mutable_senderinfo() {
  set_has_senderinfo();
  if (senderinfo_ == NULL) senderinfo_ = new ::game_landlord_net_human_protocol::player_info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.invitation_info.senderInfo)
  return senderinfo_;
}
inline ::game_landlord_net_human_protocol::player_info* invitation_info::release_senderinfo() {
  clear_has_senderinfo();
  ::game_landlord_net_human_protocol::player_info* temp = senderinfo_;
  senderinfo_ = NULL;
  return temp;
}
inline void invitation_info::set_allocated_senderinfo(::game_landlord_net_human_protocol::player_info* senderinfo) {
  delete senderinfo_;
  senderinfo_ = senderinfo;
  if (senderinfo) {
    set_has_senderinfo();
  } else {
    clear_has_senderinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.invitation_info.senderInfo)
}

// optional int32 roomId = 2;
inline bool invitation_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invitation_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invitation_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invitation_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 invitation_info::roomid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.invitation_info.roomId)
  return roomid_;
}
inline void invitation_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.invitation_info.roomId)
}

// optional string roomName = 3;
inline bool invitation_info::has_roomname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void invitation_info::set_has_roomname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void invitation_info::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void invitation_info::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& invitation_info::roomname() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.invitation_info.roomName)
  return *roomname_;
}
inline void invitation_info::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.invitation_info.roomName)
}
inline void invitation_info::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.invitation_info.roomName)
}
inline void invitation_info::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.invitation_info.roomName)
}
inline ::std::string* invitation_info::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.invitation_info.roomName)
  return roomname_;
}
inline ::std::string* invitation_info::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void invitation_info::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.invitation_info.roomName)
}

// optional int32 count = 4;
inline bool invitation_info::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void invitation_info::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void invitation_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void invitation_info::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 invitation_info::count() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.invitation_info.count)
  return count_;
}
inline void invitation_info::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.invitation_info.count)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_landlord_net_human_protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game_landlord_net_human_protocol::e_server_msg_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_net_human_protocol::e_server_msg_type>() {
  return ::game_landlord_net_human_protocol::e_server_msg_type_descriptor();
}
template <> struct is_proto_enum< ::game_landlord_net_human_protocol::e_server_error_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_net_human_protocol::e_server_error_code>() {
  return ::game_landlord_net_human_protocol::e_server_error_code_descriptor();
}
template <> struct is_proto_enum< ::game_landlord_net_human_protocol::e_game_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_net_human_protocol::e_game_state>() {
  return ::game_landlord_net_human_protocol::e_game_state_descriptor();
}
template <> struct is_proto_enum< ::game_landlord_net_human_protocol::e_player_game_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_net_human_protocol::e_player_game_state>() {
  return ::game_landlord_net_human_protocol::e_player_game_state_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5flandlord_5fnet_5fhuman_5fdef_2eproto__INCLUDED
