// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_landlord_net_human_protocol.proto

#ifndef PROTOBUF_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_landlord_net_human_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_landlord_net_human_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

class packetc2l_create_room;
class packetl2c_create_room_result;
class packetc2l_Hang;
class packetl2c_Hang_result;
class packetc2l_add_robot;
class packetl2c_add_robot_result;
class packetc2l_change_desk;
class packetl2c_change_desk_result;
class packetc2l_join_player_list;
class packetl2c_join_player_list_result;
class packetc2l_join_room;
class packetl2c_join_room_result;
class packetc2l_or_agree_join_room;
class packetl2c_or_agree_join_room_result;
class packetc2l_kich_player;
class packetl2c_kich_player_result;
class packetc2l_or_prepare;
class packetc2l_SystemTalk;
class packetc2l_roomlist;
class packetl2c_roomlist_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_get_room_scene_info;
class packetl2c_get_room_scene_info_result;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_rob_landlord;
class packetc2l_playhand;
class packetl2c_notice_startgame;
class packetl2c_notice_who_playhand;
class packetl2c_notice_playhand;
class packetl2c_notice_rob_landlord;
class packetl2c_notice_rob_landlord_result;
class packetl2c_notice_winlose;
class packetl2c_notice_SystemTalk;
class packetl2c_notice_room_enter_leave_info;
class packetl2c_notice_room_prepare_info;
class packetl2c_notice_room_change_info;
class packetl2c_notice_invite_room_list;
class packetl2c_notice_who_is_roomcreator;

// ===================================================================

class packetc2l_create_room : public ::google::protobuf::Message {
 public:
  packetc2l_create_room();
  virtual ~packetc2l_create_room();

  packetc2l_create_room(const packetc2l_create_room& from);

  inline packetc2l_create_room& operator=(const packetc2l_create_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_create_room& default_instance();

  void Swap(packetc2l_create_room* other);

  // implements Message ----------------------------------------------

  packetc2l_create_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_create_room& from);
  void MergeFrom(const packetc2l_create_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_create_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional string roomName = 3;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bool orshuffle = 5;
  inline bool has_orshuffle() const;
  inline void clear_orshuffle();
  static const int kOrshuffleFieldNumber = 5;
  inline bool orshuffle() const;
  inline void set_orshuffle(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_create_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_orshuffle();
  inline void clear_has_orshuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 action_;
  ::std::string* roomname_;
  ::std::string* password_;
  bool orshuffle_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_create_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_create_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_create_room_result();
  virtual ~packetl2c_create_room_result();

  packetl2c_create_room_result(const packetl2c_create_room_result& from);

  inline packetl2c_create_room_result& operator=(const packetl2c_create_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_create_room_result& default_instance();

  void Swap(packetl2c_create_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_create_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_create_room_result& from);
  void MergeFrom(const packetl2c_create_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_create_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // optional int32 action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_create_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::int32 action_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_create_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_Hang : public ::google::protobuf::Message {
 public:
  packetc2l_Hang();
  virtual ~packetc2l_Hang();

  packetc2l_Hang(const packetc2l_Hang& from);

  inline packetc2l_Hang& operator=(const packetc2l_Hang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_Hang& default_instance();

  void Swap(packetc2l_Hang* other);

  // implements Message ----------------------------------------------

  packetc2l_Hang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_Hang& from);
  void MergeFrom(const packetc2l_Hang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_Hang];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional bool orHang = 2;
  inline bool has_orhang() const;
  inline void clear_orhang();
  static const int kOrHangFieldNumber = 2;
  inline bool orhang() const;
  inline void set_orhang(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_Hang)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_orhang();
  inline void clear_has_orhang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  bool orhang_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_Hang* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_Hang_result : public ::google::protobuf::Message {
 public:
  packetl2c_Hang_result();
  virtual ~packetl2c_Hang_result();

  packetl2c_Hang_result(const packetl2c_Hang_result& from);

  inline packetl2c_Hang_result& operator=(const packetl2c_Hang_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_Hang_result& default_instance();

  void Swap(packetl2c_Hang_result* other);

  // implements Message ----------------------------------------------

  packetl2c_Hang_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_Hang_result& from);
  void MergeFrom(const packetl2c_Hang_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_Hang];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // optional bool orHang = 3;
  inline bool has_orhang() const;
  inline void clear_orhang();
  static const int kOrHangFieldNumber = 3;
  inline bool orhang() const;
  inline void set_orhang(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_Hang_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_orhang();
  inline void clear_has_orhang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  bool orhang_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_Hang_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_add_robot : public ::google::protobuf::Message {
 public:
  packetc2l_add_robot();
  virtual ~packetc2l_add_robot();

  packetc2l_add_robot(const packetc2l_add_robot& from);

  inline packetc2l_add_robot& operator=(const packetc2l_add_robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_add_robot& default_instance();

  void Swap(packetc2l_add_robot* other);

  // implements Message ----------------------------------------------

  packetc2l_add_robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_add_robot& from);
  void MergeFrom(const packetc2l_add_robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_robot];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 room_deskId = 2;
  inline bool has_room_deskid() const;
  inline void clear_room_deskid();
  static const int kRoomDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_deskid() const;
  inline void set_room_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_add_robot)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_deskid();
  inline void clear_has_room_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 room_deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_add_robot* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_add_robot_result : public ::google::protobuf::Message {
 public:
  packetl2c_add_robot_result();
  virtual ~packetl2c_add_robot_result();

  packetl2c_add_robot_result(const packetl2c_add_robot_result& from);

  inline packetl2c_add_robot_result& operator=(const packetl2c_add_robot_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_add_robot_result& default_instance();

  void Swap(packetl2c_add_robot_result* other);

  // implements Message ----------------------------------------------

  packetl2c_add_robot_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_add_robot_result& from);
  void MergeFrom(const packetl2c_add_robot_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_robot];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_add_robot_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_add_robot_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_change_desk : public ::google::protobuf::Message {
 public:
  packetc2l_change_desk();
  virtual ~packetc2l_change_desk();

  packetc2l_change_desk(const packetc2l_change_desk& from);

  inline packetc2l_change_desk& operator=(const packetc2l_change_desk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_change_desk& default_instance();

  void Swap(packetc2l_change_desk* other);

  // implements Message ----------------------------------------------

  packetc2l_change_desk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_change_desk& from);
  void MergeFrom(const packetc2l_change_desk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 room_deskId = 2;
  inline bool has_room_deskid() const;
  inline void clear_room_deskid();
  static const int kRoomDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_deskid() const;
  inline void set_room_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_change_desk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_deskid();
  inline void clear_has_room_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 room_deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_change_desk* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_change_desk_result : public ::google::protobuf::Message {
 public:
  packetl2c_change_desk_result();
  virtual ~packetl2c_change_desk_result();

  packetl2c_change_desk_result(const packetl2c_change_desk_result& from);

  inline packetl2c_change_desk_result& operator=(const packetl2c_change_desk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_change_desk_result& default_instance();

  void Swap(packetl2c_change_desk_result* other);

  // implements Message ----------------------------------------------

  packetl2c_change_desk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_change_desk_result& from);
  void MergeFrom(const packetl2c_change_desk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_change_desk_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_change_desk_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_join_player_list : public ::google::protobuf::Message {
 public:
  packetc2l_join_player_list();
  virtual ~packetc2l_join_player_list();

  packetc2l_join_player_list(const packetc2l_join_player_list& from);

  inline packetc2l_join_player_list& operator=(const packetc2l_join_player_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_join_player_list& default_instance();

  void Swap(packetc2l_join_player_list* other);

  // implements Message ----------------------------------------------

  packetc2l_join_player_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_join_player_list& from);
  void MergeFrom(const packetc2l_join_player_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_player_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_join_player_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_join_player_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_join_player_list_result : public ::google::protobuf::Message {
 public:
  packetl2c_join_player_list_result();
  virtual ~packetl2c_join_player_list_result();

  packetl2c_join_player_list_result(const packetl2c_join_player_list_result& from);

  inline packetl2c_join_player_list_result& operator=(const packetl2c_join_player_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_join_player_list_result& default_instance();

  void Swap(packetl2c_join_player_list_result* other);

  // implements Message ----------------------------------------------

  packetl2c_join_player_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_join_player_list_result& from);
  void MergeFrom(const packetl2c_join_player_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_player_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // repeated .game_landlord_net_human_protocol.player_info playerlist = 2;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerlistFieldNumber = 2;
  inline const ::game_landlord_net_human_protocol::player_info& playerlist(int index) const;
  inline ::game_landlord_net_human_protocol::player_info* mutable_playerlist(int index);
  inline ::game_landlord_net_human_protocol::player_info* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_join_player_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info > playerlist_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_join_player_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_join_room : public ::google::protobuf::Message {
 public:
  packetc2l_join_room();
  virtual ~packetc2l_join_room();

  packetc2l_join_room(const packetc2l_join_room& from);

  inline packetc2l_join_room& operator=(const packetc2l_join_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_join_room& default_instance();

  void Swap(packetc2l_join_room* other);

  // implements Message ----------------------------------------------

  packetc2l_join_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_join_room& from);
  void MergeFrom(const packetc2l_join_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_join_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 playerid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_join_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_join_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_join_room_result();
  virtual ~packetl2c_join_room_result();

  packetl2c_join_room_result(const packetl2c_join_room_result& from);

  inline packetl2c_join_room_result& operator=(const packetl2c_join_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_join_room_result& default_instance();

  void Swap(packetl2c_join_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_join_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_join_room_result& from);
  void MergeFrom(const packetl2c_join_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_join_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_join_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_or_agree_join_room : public ::google::protobuf::Message {
 public:
  packetc2l_or_agree_join_room();
  virtual ~packetc2l_or_agree_join_room();

  packetc2l_or_agree_join_room(const packetc2l_or_agree_join_room& from);

  inline packetc2l_or_agree_join_room& operator=(const packetc2l_or_agree_join_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_or_agree_join_room& default_instance();

  void Swap(packetc2l_or_agree_join_room* other);

  // implements Message ----------------------------------------------

  packetc2l_or_agree_join_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_or_agree_join_room& from);
  void MergeFrom(const packetc2l_or_agree_join_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_or_agree_join_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional bool orAgree = 2;
  inline bool has_oragree() const;
  inline void clear_oragree();
  static const int kOrAgreeFieldNumber = 2;
  inline bool oragree() const;
  inline void set_oragree(bool value);

  // optional int32 joinId = 3;
  inline bool has_joinid() const;
  inline void clear_joinid();
  static const int kJoinIdFieldNumber = 3;
  inline ::google::protobuf::int32 joinid() const;
  inline void set_joinid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_or_agree_join_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_oragree();
  inline void clear_has_oragree();
  inline void set_has_joinid();
  inline void clear_has_joinid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  bool oragree_;
  ::google::protobuf::int32 joinid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_or_agree_join_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_or_agree_join_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_or_agree_join_room_result();
  virtual ~packetl2c_or_agree_join_room_result();

  packetl2c_or_agree_join_room_result(const packetl2c_or_agree_join_room_result& from);

  inline packetl2c_or_agree_join_room_result& operator=(const packetl2c_or_agree_join_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_or_agree_join_room_result& default_instance();

  void Swap(packetl2c_or_agree_join_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_or_agree_join_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_or_agree_join_room_result& from);
  void MergeFrom(const packetl2c_or_agree_join_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_or_agree_join_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_or_agree_join_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_or_agree_join_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_kich_player : public ::google::protobuf::Message {
 public:
  packetc2l_kich_player();
  virtual ~packetc2l_kich_player();

  packetc2l_kich_player(const packetc2l_kich_player& from);

  inline packetc2l_kich_player& operator=(const packetc2l_kich_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_kich_player& default_instance();

  void Swap(packetc2l_kich_player* other);

  // implements Message ----------------------------------------------

  packetc2l_kich_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_kich_player& from);
  void MergeFrom(const packetc2l_kich_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_kich_player];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 room_deskId = 2;
  inline bool has_room_deskid() const;
  inline void clear_room_deskid();
  static const int kRoomDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_deskid() const;
  inline void set_room_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_kich_player)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_deskid();
  inline void clear_has_room_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 room_deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_kich_player* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_kich_player_result : public ::google::protobuf::Message {
 public:
  packetl2c_kich_player_result();
  virtual ~packetl2c_kich_player_result();

  packetl2c_kich_player_result(const packetl2c_kich_player_result& from);

  inline packetl2c_kich_player_result& operator=(const packetl2c_kich_player_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_kich_player_result& default_instance();

  void Swap(packetl2c_kich_player_result* other);

  // implements Message ----------------------------------------------

  packetl2c_kich_player_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_kich_player_result& from);
  void MergeFrom(const packetl2c_kich_player_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_kich_player];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_kich_player_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_kich_player_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_or_prepare : public ::google::protobuf::Message {
 public:
  packetc2l_or_prepare();
  virtual ~packetc2l_or_prepare();

  packetc2l_or_prepare(const packetc2l_or_prepare& from);

  inline packetc2l_or_prepare& operator=(const packetc2l_or_prepare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_or_prepare& default_instance();

  void Swap(packetc2l_or_prepare* other);

  // implements Message ----------------------------------------------

  packetc2l_or_prepare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_or_prepare& from);
  void MergeFrom(const packetc2l_or_prepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_or_prepare];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional bool orPrepare = 2;
  inline bool has_orprepare() const;
  inline void clear_orprepare();
  static const int kOrPrepareFieldNumber = 2;
  inline bool orprepare() const;
  inline void set_orprepare(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_or_prepare)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_orprepare();
  inline void clear_has_orprepare();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  bool orprepare_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_or_prepare* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_SystemTalk : public ::google::protobuf::Message {
 public:
  packetc2l_SystemTalk();
  virtual ~packetc2l_SystemTalk();

  packetc2l_SystemTalk(const packetc2l_SystemTalk& from);

  inline packetc2l_SystemTalk& operator=(const packetc2l_SystemTalk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_SystemTalk& default_instance();

  void Swap(packetc2l_SystemTalk* other);

  // implements Message ----------------------------------------------

  packetc2l_SystemTalk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_SystemTalk& from);
  void MergeFrom(const packetc2l_SystemTalk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_SystemTalk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 talk_Id = 2;
  inline bool has_talk_id() const;
  inline void clear_talk_id();
  static const int kTalkIdFieldNumber = 2;
  inline ::google::protobuf::int32 talk_id() const;
  inline void set_talk_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_SystemTalk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_talk_id();
  inline void clear_has_talk_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 talk_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_SystemTalk* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_roomlist : public ::google::protobuf::Message {
 public:
  packetc2l_roomlist();
  virtual ~packetc2l_roomlist();

  packetc2l_roomlist(const packetc2l_roomlist& from);

  inline packetc2l_roomlist& operator=(const packetc2l_roomlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_roomlist& default_instance();

  void Swap(packetc2l_roomlist* other);

  // implements Message ----------------------------------------------

  packetc2l_roomlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_roomlist& from);
  void MergeFrom(const packetc2l_roomlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_roomlist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_roomlist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_roomlist* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_roomlist_result : public ::google::protobuf::Message {
 public:
  packetl2c_roomlist_result();
  virtual ~packetl2c_roomlist_result();

  packetl2c_roomlist_result(const packetl2c_roomlist_result& from);

  inline packetl2c_roomlist_result& operator=(const packetl2c_roomlist_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_roomlist_result& default_instance();

  void Swap(packetl2c_roomlist_result* other);

  // implements Message ----------------------------------------------

  packetl2c_roomlist_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_roomlist_result& from);
  void MergeFrom(const packetl2c_roomlist_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_roomlist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // repeated .game_landlord_net_human_protocol.room_info roomInfoList = 2;
  inline int roominfolist_size() const;
  inline void clear_roominfolist();
  static const int kRoomInfoListFieldNumber = 2;
  inline const ::game_landlord_net_human_protocol::room_info& roominfolist(int index) const;
  inline ::game_landlord_net_human_protocol::room_info* mutable_roominfolist(int index);
  inline ::game_landlord_net_human_protocol::room_info* add_roominfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::room_info >&
      roominfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::room_info >*
      mutable_roominfolist();

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_roomlist_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::room_info > roominfolist_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_roomlist_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 room_id_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // repeated .game_landlord_net_human_protocol.player_info otherPlayerInfos = 3;
  inline int otherplayerinfos_size() const;
  inline void clear_otherplayerinfos();
  static const int kOtherPlayerInfosFieldNumber = 3;
  inline const ::game_landlord_net_human_protocol::player_info& otherplayerinfos(int index) const;
  inline ::game_landlord_net_human_protocol::player_info* mutable_otherplayerinfos(int index);
  inline ::game_landlord_net_human_protocol::player_info* add_otherplayerinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
      otherplayerinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
      mutable_otherplayerinfos();

  // optional .game_landlord_net_human_protocol.room_info roomInfo = 4;
  inline bool has_roominfo() const;
  inline void clear_roominfo();
  static const int kRoomInfoFieldNumber = 4;
  inline const ::game_landlord_net_human_protocol::room_info& roominfo() const;
  inline ::game_landlord_net_human_protocol::room_info* mutable_roominfo();
  inline ::game_landlord_net_human_protocol::room_info* release_roominfo();
  inline void set_allocated_roominfo(::game_landlord_net_human_protocol::room_info* roominfo);

  // optional int32 deskId = 5;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 5;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roominfo();
  inline void clear_has_roominfo();
  inline void set_has_deskid();
  inline void clear_has_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info > otherplayerinfos_;
  ::game_landlord_net_human_protocol::room_info* roominfo_;
  ::google::protobuf::int32 deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_scene_info();
  virtual ~packetc2l_get_room_scene_info();

  packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from);

  inline packetc2l_get_room_scene_info& operator=(const packetc2l_get_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_scene_info& default_instance();

  void Swap(packetc2l_get_room_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_scene_info& from);
  void MergeFrom(const packetc2l_get_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_get_room_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_scene_info_result();
  virtual ~packetl2c_get_room_scene_info_result();

  packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from);

  inline packetl2c_get_room_scene_info_result& operator=(const packetl2c_get_room_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_scene_info_result& default_instance();

  void Swap(packetl2c_get_room_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_scene_info_result& from);
  void MergeFrom(const packetl2c_get_room_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.room_info m_roomInfo = 2;
  inline bool has_m_roominfo() const;
  inline void clear_m_roominfo();
  static const int kMRoomInfoFieldNumber = 2;
  inline const ::game_landlord_net_human_protocol::room_info& m_roominfo() const;
  inline ::game_landlord_net_human_protocol::room_info* mutable_m_roominfo();
  inline ::game_landlord_net_human_protocol::room_info* release_m_roominfo();
  inline void set_allocated_m_roominfo(::game_landlord_net_human_protocol::room_info* m_roominfo);

  // optional .game_landlord_net_human_protocol.e_game_state gameState = 3;
  inline bool has_gamestate() const;
  inline void clear_gamestate();
  static const int kGameStateFieldNumber = 3;
  inline ::game_landlord_net_human_protocol::e_game_state gamestate() const;
  inline void set_gamestate(::game_landlord_net_human_protocol::e_game_state value);

  // repeated int32 cards = 4;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 opencard = 5;
  inline bool has_opencard() const;
  inline void clear_opencard();
  static const int kOpencardFieldNumber = 5;
  inline ::google::protobuf::int32 opencard() const;
  inline void set_opencard(::google::protobuf::int32 value);

  // repeated .game_landlord_net_human_protocol.card_Info_1 other_cards_info = 6;
  inline int other_cards_info_size() const;
  inline void clear_other_cards_info();
  static const int kOtherCardsInfoFieldNumber = 6;
  inline const ::game_landlord_net_human_protocol::card_Info_1& other_cards_info(int index) const;
  inline ::game_landlord_net_human_protocol::card_Info_1* mutable_other_cards_info(int index);
  inline ::game_landlord_net_human_protocol::card_Info_1* add_other_cards_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info_1 >&
      other_cards_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info_1 >*
      mutable_other_cards_info();

  // repeated .game_landlord_net_human_protocol.player_info playerList = 7;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 7;
  inline const ::game_landlord_net_human_protocol::player_info& playerlist(int index) const;
  inline ::game_landlord_net_human_protocol::player_info* mutable_playerlist(int index);
  inline ::game_landlord_net_human_protocol::player_info* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
      mutable_playerlist();

  // optional int32 landlord_Id = 8;
  inline bool has_landlord_id() const;
  inline void clear_landlord_id();
  static const int kLandlordIdFieldNumber = 8;
  inline ::google::protobuf::int32 landlord_id() const;
  inline void set_landlord_id(::google::protobuf::int32 value);

  // optional .game_landlord_net_human_protocol.card_Info lastPlayHand = 9;
  inline bool has_lastplayhand() const;
  inline void clear_lastplayhand();
  static const int kLastPlayHandFieldNumber = 9;
  inline const ::game_landlord_net_human_protocol::card_Info& lastplayhand() const;
  inline ::game_landlord_net_human_protocol::card_Info* mutable_lastplayhand();
  inline ::game_landlord_net_human_protocol::card_Info* release_lastplayhand();
  inline void set_allocated_lastplayhand(::game_landlord_net_human_protocol::card_Info* lastplayhand);

  // repeated int32 cards_1 = 10;
  inline int cards_1_size() const;
  inline void clear_cards_1();
  static const int kCards1FieldNumber = 10;
  inline ::google::protobuf::int32 cards_1(int index) const;
  inline void set_cards_1(int index, ::google::protobuf::int32 value);
  inline void add_cards_1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_1();

  // optional int32 cdTime = 11;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdTimeFieldNumber = 11;
  inline ::google::protobuf::int32 cdtime() const;
  inline void set_cdtime(::google::protobuf::int32 value);

  // optional .game_landlord_net_human_protocol.e_player_game_state playerState = 12;
  inline bool has_playerstate() const;
  inline void clear_playerstate();
  static const int kPlayerStateFieldNumber = 12;
  inline ::game_landlord_net_human_protocol::e_player_game_state playerstate() const;
  inline void set_playerstate(::game_landlord_net_human_protocol::e_player_game_state value);

  // optional int32 current_who_robLandlording = 13;
  inline bool has_current_who_roblandlording() const;
  inline void clear_current_who_roblandlording();
  static const int kCurrentWhoRobLandlordingFieldNumber = 13;
  inline ::google::protobuf::int32 current_who_roblandlording() const;
  inline void set_current_who_roblandlording(::google::protobuf::int32 value);

  // optional int32 current_who_playhanding = 14;
  inline bool has_current_who_playhanding() const;
  inline void clear_current_who_playhanding();
  static const int kCurrentWhoPlayhandingFieldNumber = 14;
  inline ::google::protobuf::int32 current_who_playhanding() const;
  inline void set_current_who_playhanding(::google::protobuf::int32 value);

  // optional int32 score = 15;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 15;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bool orHang = 16;
  inline bool has_orhang() const;
  inline void clear_orhang();
  static const int kOrHangFieldNumber = 16;
  inline bool orhang() const;
  inline void set_orhang(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_m_roominfo();
  inline void clear_has_m_roominfo();
  inline void set_has_gamestate();
  inline void clear_has_gamestate();
  inline void set_has_opencard();
  inline void clear_has_opencard();
  inline void set_has_landlord_id();
  inline void clear_has_landlord_id();
  inline void set_has_lastplayhand();
  inline void clear_has_lastplayhand();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_playerstate();
  inline void clear_has_playerstate();
  inline void set_has_current_who_roblandlording();
  inline void clear_has_current_who_roblandlording();
  inline void set_has_current_who_playhanding();
  inline void clear_has_current_who_playhanding();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_orhang();
  inline void clear_has_orhang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_landlord_net_human_protocol::room_info* m_roominfo_;
  int packet_id_;
  int gamestate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info_1 > other_cards_info_;
  ::google::protobuf::int32 opencard_;
  ::google::protobuf::int32 landlord_id_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info > playerlist_;
  ::game_landlord_net_human_protocol::card_Info* lastplayhand_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_1_;
  ::google::protobuf::int32 cdtime_;
  int playerstate_;
  ::google::protobuf::int32 current_who_roblandlording_;
  ::google::protobuf::int32 current_who_playhanding_;
  ::google::protobuf::int32 score_;
  bool orhang_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional bool is_intable = 2;
  inline bool has_is_intable() const;
  inline void clear_is_intable();
  static const int kIsIntableFieldNumber = 2;
  inline bool is_intable() const;
  inline void set_is_intable(bool value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_intable();
  inline void clear_has_is_intable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  bool is_intable_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_rob_landlord : public ::google::protobuf::Message {
 public:
  packetc2l_rob_landlord();
  virtual ~packetc2l_rob_landlord();

  packetc2l_rob_landlord(const packetc2l_rob_landlord& from);

  inline packetc2l_rob_landlord& operator=(const packetc2l_rob_landlord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_rob_landlord& default_instance();

  void Swap(packetc2l_rob_landlord* other);

  // implements Message ----------------------------------------------

  packetc2l_rob_landlord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_rob_landlord& from);
  void MergeFrom(const packetc2l_rob_landlord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_rob_landlord];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 or_Rob = 2;
  inline bool has_or_rob() const;
  inline void clear_or_rob();
  static const int kOrRobFieldNumber = 2;
  inline ::google::protobuf::int32 or_rob() const;
  inline void set_or_rob(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_rob_landlord)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_or_rob();
  inline void clear_has_or_rob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 or_rob_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_rob_landlord* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_playhand : public ::google::protobuf::Message {
 public:
  packetc2l_playhand();
  virtual ~packetc2l_playhand();

  packetc2l_playhand(const packetc2l_playhand& from);

  inline packetc2l_playhand& operator=(const packetc2l_playhand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_playhand& default_instance();

  void Swap(packetc2l_playhand* other);

  // implements Message ----------------------------------------------

  packetc2l_playhand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_playhand& from);
  void MergeFrom(const packetc2l_playhand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_playhand];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.card_Info cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::game_landlord_net_human_protocol::card_Info& cards() const;
  inline ::game_landlord_net_human_protocol::card_Info* mutable_cards();
  inline ::game_landlord_net_human_protocol::card_Info* release_cards();
  inline void set_allocated_cards(::game_landlord_net_human_protocol::card_Info* cards);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetc2l_playhand)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cards();
  inline void clear_has_cards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_landlord_net_human_protocol::card_Info* cards_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_playhand* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_startgame : public ::google::protobuf::Message {
 public:
  packetl2c_notice_startgame();
  virtual ~packetl2c_notice_startgame();

  packetl2c_notice_startgame(const packetl2c_notice_startgame& from);

  inline packetl2c_notice_startgame& operator=(const packetl2c_notice_startgame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_startgame& default_instance();

  void Swap(packetl2c_notice_startgame* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_startgame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_startgame& from);
  void MergeFrom(const packetl2c_notice_startgame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_startgame];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 opencard = 3;
  inline bool has_opencard() const;
  inline void clear_opencard();
  static const int kOpencardFieldNumber = 3;
  inline ::google::protobuf::int32 opencard() const;
  inline void set_opencard(::google::protobuf::int32 value);

  // repeated int32 cards_1 = 4;
  inline int cards_1_size() const;
  inline void clear_cards_1();
  static const int kCards1FieldNumber = 4;
  inline ::google::protobuf::int32 cards_1(int index) const;
  inline void set_cards_1(int index, ::google::protobuf::int32 value);
  inline void add_cards_1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_1();

  // repeated .game_landlord_net_human_protocol.player_info playerList = 5;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 5;
  inline const ::game_landlord_net_human_protocol::player_info& playerlist(int index) const;
  inline ::game_landlord_net_human_protocol::player_info* mutable_playerlist(int index);
  inline ::game_landlord_net_human_protocol::player_info* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
      mutable_playerlist();

  // optional int32 landlord_Id = 6;
  inline bool has_landlord_id() const;
  inline void clear_landlord_id();
  static const int kLandlordIdFieldNumber = 6;
  inline ::google::protobuf::int32 landlord_id() const;
  inline void set_landlord_id(::google::protobuf::int32 value);

  // optional int32 min_score = 7;
  inline bool has_min_score() const;
  inline void clear_min_score();
  static const int kMinScoreFieldNumber = 7;
  inline ::google::protobuf::int32 min_score() const;
  inline void set_min_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_startgame)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_opencard();
  inline void clear_has_opencard();
  inline void set_has_landlord_id();
  inline void clear_has_landlord_id();
  inline void set_has_min_score();
  inline void clear_has_min_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  int packet_id_;
  ::google::protobuf::int32 opencard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_1_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info > playerlist_;
  ::google::protobuf::int32 landlord_id_;
  ::google::protobuf::int32 min_score_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_startgame* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_who_playhand : public ::google::protobuf::Message {
 public:
  packetl2c_notice_who_playhand();
  virtual ~packetl2c_notice_who_playhand();

  packetl2c_notice_who_playhand(const packetl2c_notice_who_playhand& from);

  inline packetl2c_notice_who_playhand& operator=(const packetl2c_notice_who_playhand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_who_playhand& default_instance();

  void Swap(packetl2c_notice_who_playhand* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_who_playhand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_who_playhand& from);
  void MergeFrom(const packetl2c_notice_who_playhand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_playhand];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 deskId = 2;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_who_playhand)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_deskid();
  inline void clear_has_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_who_playhand* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_playhand : public ::google::protobuf::Message {
 public:
  packetl2c_notice_playhand();
  virtual ~packetl2c_notice_playhand();

  packetl2c_notice_playhand(const packetl2c_notice_playhand& from);

  inline packetl2c_notice_playhand& operator=(const packetl2c_notice_playhand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_playhand& default_instance();

  void Swap(packetl2c_notice_playhand* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_playhand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_playhand& from);
  void MergeFrom(const packetl2c_notice_playhand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_playhand];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // optional .game_landlord_net_human_protocol.card_Info cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::game_landlord_net_human_protocol::card_Info& cards() const;
  inline ::game_landlord_net_human_protocol::card_Info* mutable_cards();
  inline ::game_landlord_net_human_protocol::card_Info* release_cards();
  inline void set_allocated_cards(::game_landlord_net_human_protocol::card_Info* cards);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_playhand)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_cards();
  inline void clear_has_cards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::game_landlord_net_human_protocol::card_Info* cards_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_playhand* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_rob_landlord : public ::google::protobuf::Message {
 public:
  packetl2c_notice_rob_landlord();
  virtual ~packetl2c_notice_rob_landlord();

  packetl2c_notice_rob_landlord(const packetl2c_notice_rob_landlord& from);

  inline packetl2c_notice_rob_landlord& operator=(const packetl2c_notice_rob_landlord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_rob_landlord& default_instance();

  void Swap(packetl2c_notice_rob_landlord* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_rob_landlord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_rob_landlord& from);
  void MergeFrom(const packetl2c_notice_rob_landlord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 deskId = 2;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_deskid();
  inline void clear_has_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 deskid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_rob_landlord* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_rob_landlord_result : public ::google::protobuf::Message {
 public:
  packetl2c_notice_rob_landlord_result();
  virtual ~packetl2c_notice_rob_landlord_result();

  packetl2c_notice_rob_landlord_result(const packetl2c_notice_rob_landlord_result& from);

  inline packetl2c_notice_rob_landlord_result& operator=(const packetl2c_notice_rob_landlord_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_rob_landlord_result& default_instance();

  void Swap(packetl2c_notice_rob_landlord_result* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_rob_landlord_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_rob_landlord_result& from);
  void MergeFrom(const packetl2c_notice_rob_landlord_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // optional int32 deskId = 3;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIdFieldNumber = 3;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 or_Rob = 4;
  inline bool has_or_rob() const;
  inline void clear_or_rob();
  static const int kOrRobFieldNumber = 4;
  inline ::google::protobuf::int32 or_rob() const;
  inline void set_or_rob(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_or_rob();
  inline void clear_has_or_rob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 or_rob_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_rob_landlord_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_winlose : public ::google::protobuf::Message {
 public:
  packetl2c_notice_winlose();
  virtual ~packetl2c_notice_winlose();

  packetl2c_notice_winlose(const packetl2c_notice_winlose& from);

  inline packetl2c_notice_winlose& operator=(const packetl2c_notice_winlose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_winlose& default_instance();

  void Swap(packetl2c_notice_winlose* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_winlose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_winlose& from);
  void MergeFrom(const packetl2c_notice_winlose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_winlose];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // repeated .game_landlord_net_human_protocol.desk_award_Info m_desk_awards = 2;
  inline int m_desk_awards_size() const;
  inline void clear_m_desk_awards();
  static const int kMDeskAwardsFieldNumber = 2;
  inline const ::game_landlord_net_human_protocol::desk_award_Info& m_desk_awards(int index) const;
  inline ::game_landlord_net_human_protocol::desk_award_Info* mutable_m_desk_awards(int index);
  inline ::game_landlord_net_human_protocol::desk_award_Info* add_m_desk_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::desk_award_Info >&
      m_desk_awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::desk_award_Info >*
      mutable_m_desk_awards();

  // repeated .game_landlord_net_human_protocol.card_Info remain_cards = 3;
  inline int remain_cards_size() const;
  inline void clear_remain_cards();
  static const int kRemainCardsFieldNumber = 3;
  inline const ::game_landlord_net_human_protocol::card_Info& remain_cards(int index) const;
  inline ::game_landlord_net_human_protocol::card_Info* mutable_remain_cards(int index);
  inline ::game_landlord_net_human_protocol::card_Info* add_remain_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info >&
      remain_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info >*
      mutable_remain_cards();

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_winlose)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::desk_award_Info > m_desk_awards_;
  ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info > remain_cards_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_winlose* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_SystemTalk : public ::google::protobuf::Message {
 public:
  packetl2c_notice_SystemTalk();
  virtual ~packetl2c_notice_SystemTalk();

  packetl2c_notice_SystemTalk(const packetl2c_notice_SystemTalk& from);

  inline packetl2c_notice_SystemTalk& operator=(const packetl2c_notice_SystemTalk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_SystemTalk& default_instance();

  void Swap(packetl2c_notice_SystemTalk* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_SystemTalk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_SystemTalk& from);
  void MergeFrom(const packetl2c_notice_SystemTalk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_SystemTalk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 talk_Id = 2;
  inline bool has_talk_id() const;
  inline void clear_talk_id();
  static const int kTalkIdFieldNumber = 2;
  inline ::google::protobuf::int32 talk_id() const;
  inline void set_talk_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_SystemTalk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_talk_id();
  inline void clear_has_talk_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 talk_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_SystemTalk* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_room_enter_leave_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_room_enter_leave_info();
  virtual ~packetl2c_notice_room_enter_leave_info();

  packetl2c_notice_room_enter_leave_info(const packetl2c_notice_room_enter_leave_info& from);

  inline packetl2c_notice_room_enter_leave_info& operator=(const packetl2c_notice_room_enter_leave_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_room_enter_leave_info& default_instance();

  void Swap(packetl2c_notice_room_enter_leave_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_room_enter_leave_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_room_enter_leave_info& from);
  void MergeFrom(const packetl2c_notice_room_enter_leave_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_room_enter_leave_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional .game_landlord_net_human_protocol.player_info playerInfo = 3;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 3;
  inline const ::game_landlord_net_human_protocol::player_info& playerinfo() const;
  inline ::game_landlord_net_human_protocol::player_info* mutable_playerinfo();
  inline ::game_landlord_net_human_protocol::player_info* release_playerinfo();
  inline void set_allocated_playerinfo(::game_landlord_net_human_protocol::player_info* playerinfo);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 action_;
  ::game_landlord_net_human_protocol::player_info* playerinfo_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_room_enter_leave_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_room_prepare_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_room_prepare_info();
  virtual ~packetl2c_notice_room_prepare_info();

  packetl2c_notice_room_prepare_info(const packetl2c_notice_room_prepare_info& from);

  inline packetl2c_notice_room_prepare_info& operator=(const packetl2c_notice_room_prepare_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_room_prepare_info& default_instance();

  void Swap(packetl2c_notice_room_prepare_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_room_prepare_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_room_prepare_info& from);
  void MergeFrom(const packetl2c_notice_room_prepare_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_room_prepare_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::game_landlord_net_human_protocol::e_server_error_code result() const;
  inline void set_result(::game_landlord_net_human_protocol::e_server_error_code value);

  // optional int32 action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional int32 playerId = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 4;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 playerid_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_room_prepare_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_room_change_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_room_change_info();
  virtual ~packetl2c_notice_room_change_info();

  packetl2c_notice_room_change_info(const packetl2c_notice_room_change_info& from);

  inline packetl2c_notice_room_change_info& operator=(const packetl2c_notice_room_change_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_room_change_info& default_instance();

  void Swap(packetl2c_notice_room_change_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_room_change_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_room_change_info& from);
  void MergeFrom(const packetl2c_notice_room_change_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_room_change_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional .game_landlord_net_human_protocol.room_info roomInfo = 3;
  inline bool has_roominfo() const;
  inline void clear_roominfo();
  static const int kRoomInfoFieldNumber = 3;
  inline const ::game_landlord_net_human_protocol::room_info& roominfo() const;
  inline ::game_landlord_net_human_protocol::room_info* mutable_roominfo();
  inline ::game_landlord_net_human_protocol::room_info* release_roominfo();
  inline void set_allocated_roominfo(::game_landlord_net_human_protocol::room_info* roominfo);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_room_change_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_roominfo();
  inline void clear_has_roominfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 action_;
  ::game_landlord_net_human_protocol::room_info* roominfo_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_room_change_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_invite_room_list : public ::google::protobuf::Message {
 public:
  packetl2c_notice_invite_room_list();
  virtual ~packetl2c_notice_invite_room_list();

  packetl2c_notice_invite_room_list(const packetl2c_notice_invite_room_list& from);

  inline packetl2c_notice_invite_room_list& operator=(const packetl2c_notice_invite_room_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_invite_room_list& default_instance();

  void Swap(packetl2c_notice_invite_room_list* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_invite_room_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_invite_room_list& from);
  void MergeFrom(const packetl2c_notice_invite_room_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_invite_room_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional .game_landlord_net_human_protocol.invitation_info inviteInfo = 2;
  inline bool has_inviteinfo() const;
  inline void clear_inviteinfo();
  static const int kInviteInfoFieldNumber = 2;
  inline const ::game_landlord_net_human_protocol::invitation_info& inviteinfo() const;
  inline ::game_landlord_net_human_protocol::invitation_info* mutable_inviteinfo();
  inline ::game_landlord_net_human_protocol::invitation_info* release_inviteinfo();
  inline void set_allocated_inviteinfo(::game_landlord_net_human_protocol::invitation_info* inviteinfo);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_invite_room_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_inviteinfo();
  inline void clear_has_inviteinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_landlord_net_human_protocol::invitation_info* inviteinfo_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_invite_room_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_who_is_roomcreator : public ::google::protobuf::Message {
 public:
  packetl2c_notice_who_is_roomcreator();
  virtual ~packetl2c_notice_who_is_roomcreator();

  packetl2c_notice_who_is_roomcreator(const packetl2c_notice_who_is_roomcreator& from);

  inline packetl2c_notice_who_is_roomcreator& operator=(const packetl2c_notice_who_is_roomcreator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_who_is_roomcreator& default_instance();

  void Swap(packetl2c_notice_who_is_roomcreator* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_who_is_roomcreator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_who_is_roomcreator& from);
  void MergeFrom(const packetl2c_notice_who_is_roomcreator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_is_roomcreator];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_landlord_net_human_protocol::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value);

  // optional int32 room_creator = 2;
  inline bool has_room_creator() const;
  inline void clear_room_creator();
  static const int kRoomCreatorFieldNumber = 2;
  inline ::google::protobuf::int32 room_creator() const;
  inline void set_room_creator(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_landlord_net_human_protocol.packetl2c_notice_who_is_roomcreator)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_creator();
  inline void clear_has_room_creator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 room_creator_;
  friend void  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_who_is_roomcreator* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_create_room

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_create_room];
inline bool packetc2l_create_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_create_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_create_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_create_room::clear_packet_id() {
  packet_id_ = 10017;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_create_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_create_room.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_create_room::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_create_room.packet_id)
}

// optional int32 action = 2;
inline bool packetc2l_create_room::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_create_room::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_create_room::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_create_room::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 packetc2l_create_room::action() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_create_room.action)
  return action_;
}
inline void packetc2l_create_room::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_create_room.action)
}

// optional string roomName = 3;
inline bool packetc2l_create_room::has_roomname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_create_room::set_has_roomname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_create_room::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_create_room::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& packetc2l_create_room::roomname() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_create_room.roomName)
  return *roomname_;
}
inline void packetc2l_create_room::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_create_room.roomName)
}
inline void packetc2l_create_room::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.packetc2l_create_room.roomName)
}
inline void packetc2l_create_room::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.packetc2l_create_room.roomName)
}
inline ::std::string* packetc2l_create_room::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetc2l_create_room.roomName)
  return roomname_;
}
inline ::std::string* packetc2l_create_room::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2l_create_room::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetc2l_create_room.roomName)
}

// optional string password = 4;
inline bool packetc2l_create_room::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_create_room::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_create_room::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_create_room::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& packetc2l_create_room::password() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_create_room.password)
  return *password_;
}
inline void packetc2l_create_room::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_create_room.password)
}
inline void packetc2l_create_room::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.packetc2l_create_room.password)
}
inline void packetc2l_create_room::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.packetc2l_create_room.password)
}
inline ::std::string* packetc2l_create_room::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetc2l_create_room.password)
  return password_;
}
inline ::std::string* packetc2l_create_room::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2l_create_room::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetc2l_create_room.password)
}

// optional bool orshuffle = 5;
inline bool packetc2l_create_room::has_orshuffle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2l_create_room::set_has_orshuffle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2l_create_room::clear_has_orshuffle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2l_create_room::clear_orshuffle() {
  orshuffle_ = false;
  clear_has_orshuffle();
}
inline bool packetc2l_create_room::orshuffle() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_create_room.orshuffle)
  return orshuffle_;
}
inline void packetc2l_create_room::set_orshuffle(bool value) {
  set_has_orshuffle();
  orshuffle_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_create_room.orshuffle)
}

// -------------------------------------------------------------------

// packetl2c_create_room_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_create_room];
inline bool packetl2c_create_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_create_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_create_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_create_room_result::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_create_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_create_room_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_create_room_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_create_room_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_create_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_create_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_create_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_create_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_create_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_create_room_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_create_room_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_create_room_result.result)
}

// optional int32 action = 3;
inline bool packetl2c_create_room_result::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_create_room_result::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_create_room_result::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_create_room_result::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 packetl2c_create_room_result::action() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_create_room_result.action)
  return action_;
}
inline void packetl2c_create_room_result::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_create_room_result.action)
}

// -------------------------------------------------------------------

// packetc2l_Hang

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_Hang];
inline bool packetc2l_Hang::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_Hang::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_Hang::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_Hang::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_Hang::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_Hang.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_Hang::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_Hang.packet_id)
}

// optional bool orHang = 2;
inline bool packetc2l_Hang::has_orhang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_Hang::set_has_orhang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_Hang::clear_has_orhang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_Hang::clear_orhang() {
  orhang_ = false;
  clear_has_orhang();
}
inline bool packetc2l_Hang::orhang() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_Hang.orHang)
  return orhang_;
}
inline void packetc2l_Hang::set_orhang(bool value) {
  set_has_orhang();
  orhang_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_Hang.orHang)
}

// -------------------------------------------------------------------

// packetl2c_Hang_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_Hang];
inline bool packetl2c_Hang_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_Hang_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_Hang_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_Hang_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_Hang_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_Hang_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_Hang_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_Hang_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_Hang_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_Hang_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_Hang_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_Hang_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_Hang_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_Hang_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_Hang_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_Hang_result.result)
}

// optional bool orHang = 3;
inline bool packetl2c_Hang_result::has_orhang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_Hang_result::set_has_orhang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_Hang_result::clear_has_orhang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_Hang_result::clear_orhang() {
  orhang_ = false;
  clear_has_orhang();
}
inline bool packetl2c_Hang_result::orhang() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_Hang_result.orHang)
  return orhang_;
}
inline void packetl2c_Hang_result::set_orhang(bool value) {
  set_has_orhang();
  orhang_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_Hang_result.orHang)
}

// -------------------------------------------------------------------

// packetc2l_add_robot

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_robot];
inline bool packetc2l_add_robot::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_add_robot::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_add_robot::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_add_robot::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_add_robot::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_add_robot.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_add_robot::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_add_robot.packet_id)
}

// optional int32 room_deskId = 2;
inline bool packetc2l_add_robot::has_room_deskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_add_robot::set_has_room_deskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_add_robot::clear_has_room_deskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_add_robot::clear_room_deskid() {
  room_deskid_ = 0;
  clear_has_room_deskid();
}
inline ::google::protobuf::int32 packetc2l_add_robot::room_deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_add_robot.room_deskId)
  return room_deskid_;
}
inline void packetc2l_add_robot::set_room_deskid(::google::protobuf::int32 value) {
  set_has_room_deskid();
  room_deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_add_robot.room_deskId)
}

// -------------------------------------------------------------------

// packetl2c_add_robot_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_robot];
inline bool packetl2c_add_robot_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_add_robot_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_add_robot_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_add_robot_result::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_add_robot_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_add_robot_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_add_robot_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_add_robot_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_add_robot_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_add_robot_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_add_robot_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_add_robot_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_add_robot_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_add_robot_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_add_robot_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_add_robot_result.result)
}

// -------------------------------------------------------------------

// packetc2l_change_desk

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_desk];
inline bool packetc2l_change_desk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_change_desk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_change_desk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_change_desk::clear_packet_id() {
  packet_id_ = 10019;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_change_desk::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_change_desk.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_change_desk::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_change_desk.packet_id)
}

// optional int32 room_deskId = 2;
inline bool packetc2l_change_desk::has_room_deskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_change_desk::set_has_room_deskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_change_desk::clear_has_room_deskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_change_desk::clear_room_deskid() {
  room_deskid_ = 0;
  clear_has_room_deskid();
}
inline ::google::protobuf::int32 packetc2l_change_desk::room_deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_change_desk.room_deskId)
  return room_deskid_;
}
inline void packetc2l_change_desk::set_room_deskid(::google::protobuf::int32 value) {
  set_has_room_deskid();
  room_deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_change_desk.room_deskId)
}

// -------------------------------------------------------------------

// packetl2c_change_desk_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_desk];
inline bool packetl2c_change_desk_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_change_desk_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_change_desk_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_change_desk_result::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_change_desk_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_change_desk_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_change_desk_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_change_desk_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_change_desk_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_change_desk_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_change_desk_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_change_desk_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_change_desk_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_change_desk_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_change_desk_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_change_desk_result.result)
}

// -------------------------------------------------------------------

// packetc2l_join_player_list

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_player_list];
inline bool packetc2l_join_player_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_join_player_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_join_player_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_join_player_list::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_join_player_list::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_join_player_list.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_join_player_list::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_join_player_list.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_join_player_list_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_player_list_result];
inline bool packetl2c_join_player_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_join_player_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_join_player_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_join_player_list_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_join_player_list_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_join_player_list_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_join_player_list_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_join_player_list_result.packet_id)
}

// repeated .game_landlord_net_human_protocol.player_info playerlist = 2;
inline int packetl2c_join_player_list_result::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_join_player_list_result::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_landlord_net_human_protocol::player_info& packetl2c_join_player_list_result::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_join_player_list_result.playerlist)
  return playerlist_.Get(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_join_player_list_result::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_join_player_list_result.playerlist)
  return playerlist_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_join_player_list_result::add_playerlist() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_join_player_list_result.playerlist)
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
packetl2c_join_player_list_result::playerlist() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_join_player_list_result.playerlist)
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
packetl2c_join_player_list_result::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_join_player_list_result.playerlist)
  return &playerlist_;
}

// -------------------------------------------------------------------

// packetc2l_join_room

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_room];
inline bool packetc2l_join_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_join_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_join_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_join_room::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_join_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_join_room.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_join_room::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_join_room.packet_id)
}

// optional int32 playerId = 2;
inline bool packetc2l_join_room::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_join_room::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_join_room::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_join_room::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetc2l_join_room::playerid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_join_room.playerId)
  return playerid_;
}
inline void packetc2l_join_room::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_join_room.playerId)
}

// -------------------------------------------------------------------

// packetl2c_join_room_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_room_result];
inline bool packetl2c_join_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_join_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_join_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_join_room_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_join_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_join_room_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_join_room_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_join_room_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_join_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_join_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_join_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_join_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_join_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_join_room_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_join_room_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_join_room_result.result)
}

// -------------------------------------------------------------------

// packetc2l_or_agree_join_room

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_or_agree_join_room];
inline bool packetc2l_or_agree_join_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_or_agree_join_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_or_agree_join_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_or_agree_join_room::clear_packet_id() {
  packet_id_ = 10016;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_or_agree_join_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_or_agree_join_room.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_or_agree_join_room::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_or_agree_join_room.packet_id)
}

// optional bool orAgree = 2;
inline bool packetc2l_or_agree_join_room::has_oragree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_or_agree_join_room::set_has_oragree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_or_agree_join_room::clear_has_oragree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_or_agree_join_room::clear_oragree() {
  oragree_ = false;
  clear_has_oragree();
}
inline bool packetc2l_or_agree_join_room::oragree() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_or_agree_join_room.orAgree)
  return oragree_;
}
inline void packetc2l_or_agree_join_room::set_oragree(bool value) {
  set_has_oragree();
  oragree_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_or_agree_join_room.orAgree)
}

// optional int32 joinId = 3;
inline bool packetc2l_or_agree_join_room::has_joinid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_or_agree_join_room::set_has_joinid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_or_agree_join_room::clear_has_joinid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_or_agree_join_room::clear_joinid() {
  joinid_ = 0;
  clear_has_joinid();
}
inline ::google::protobuf::int32 packetc2l_or_agree_join_room::joinid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_or_agree_join_room.joinId)
  return joinid_;
}
inline void packetc2l_or_agree_join_room::set_joinid(::google::protobuf::int32 value) {
  set_has_joinid();
  joinid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_or_agree_join_room.joinId)
}

// -------------------------------------------------------------------

// packetl2c_or_agree_join_room_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_or_agree_join_room_result];
inline bool packetl2c_or_agree_join_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_or_agree_join_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_or_agree_join_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_or_agree_join_room_result::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_or_agree_join_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_or_agree_join_room_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_or_agree_join_room_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_or_agree_join_room_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_or_agree_join_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_or_agree_join_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_or_agree_join_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_or_agree_join_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_or_agree_join_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_or_agree_join_room_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_or_agree_join_room_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_or_agree_join_room_result.result)
}

// -------------------------------------------------------------------

// packetc2l_kich_player

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_kich_player];
inline bool packetc2l_kich_player::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_kich_player::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_kich_player::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_kich_player::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_kich_player::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_kich_player.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_kich_player::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_kich_player.packet_id)
}

// optional int32 room_deskId = 2;
inline bool packetc2l_kich_player::has_room_deskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_kich_player::set_has_room_deskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_kich_player::clear_has_room_deskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_kich_player::clear_room_deskid() {
  room_deskid_ = 0;
  clear_has_room_deskid();
}
inline ::google::protobuf::int32 packetc2l_kich_player::room_deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_kich_player.room_deskId)
  return room_deskid_;
}
inline void packetc2l_kich_player::set_room_deskid(::google::protobuf::int32 value) {
  set_has_room_deskid();
  room_deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_kich_player.room_deskId)
}

// -------------------------------------------------------------------

// packetl2c_kich_player_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_kich_player];
inline bool packetl2c_kich_player_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_kich_player_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_kich_player_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_kich_player_result::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_kich_player_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_kich_player_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_kich_player_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_kich_player_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_kich_player_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_kich_player_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_kich_player_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_kich_player_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_kich_player_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_kich_player_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_kich_player_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_kich_player_result.result)
}

// -------------------------------------------------------------------

// packetc2l_or_prepare

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_or_prepare];
inline bool packetc2l_or_prepare::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_or_prepare::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_or_prepare::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_or_prepare::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_or_prepare::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_or_prepare.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_or_prepare::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_or_prepare.packet_id)
}

// optional bool orPrepare = 2;
inline bool packetc2l_or_prepare::has_orprepare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_or_prepare::set_has_orprepare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_or_prepare::clear_has_orprepare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_or_prepare::clear_orprepare() {
  orprepare_ = false;
  clear_has_orprepare();
}
inline bool packetc2l_or_prepare::orprepare() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_or_prepare.orPrepare)
  return orprepare_;
}
inline void packetc2l_or_prepare::set_orprepare(bool value) {
  set_has_orprepare();
  orprepare_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_or_prepare.orPrepare)
}

// -------------------------------------------------------------------

// packetc2l_SystemTalk

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_SystemTalk];
inline bool packetc2l_SystemTalk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_SystemTalk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_SystemTalk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_SystemTalk::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_SystemTalk::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_SystemTalk.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_SystemTalk::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_SystemTalk.packet_id)
}

// optional int32 talk_Id = 2;
inline bool packetc2l_SystemTalk::has_talk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_SystemTalk::set_has_talk_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_SystemTalk::clear_has_talk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_SystemTalk::clear_talk_id() {
  talk_id_ = 0;
  clear_has_talk_id();
}
inline ::google::protobuf::int32 packetc2l_SystemTalk::talk_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_SystemTalk.talk_Id)
  return talk_id_;
}
inline void packetc2l_SystemTalk::set_talk_id(::google::protobuf::int32 value) {
  set_has_talk_id();
  talk_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_SystemTalk.talk_Id)
}

// -------------------------------------------------------------------

// packetc2l_roomlist

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_roomlist];
inline bool packetc2l_roomlist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_roomlist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_roomlist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_roomlist::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_roomlist::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_roomlist.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_roomlist::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_roomlist.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_roomlist_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_roomlist];
inline bool packetl2c_roomlist_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_roomlist_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_roomlist_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_roomlist_result::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_roomlist_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_roomlist_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_roomlist_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_roomlist_result.packet_id)
}

// repeated .game_landlord_net_human_protocol.room_info roomInfoList = 2;
inline int packetl2c_roomlist_result::roominfolist_size() const {
  return roominfolist_.size();
}
inline void packetl2c_roomlist_result::clear_roominfolist() {
  roominfolist_.Clear();
}
inline const ::game_landlord_net_human_protocol::room_info& packetl2c_roomlist_result::roominfolist(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_roomlist_result.roomInfoList)
  return roominfolist_.Get(index);
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_roomlist_result::mutable_roominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_roomlist_result.roomInfoList)
  return roominfolist_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_roomlist_result::add_roominfolist() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_roomlist_result.roomInfoList)
  return roominfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::room_info >&
packetl2c_roomlist_result::roominfolist() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_roomlist_result.roomInfoList)
  return roominfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::room_info >*
packetl2c_roomlist_result::mutable_roominfolist() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_roomlist_result.roomInfoList)
  return &roominfolist_;
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_enter_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_enter_room.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_enter_room.packet_id)
}

// optional int32 room_id = 2;
inline bool packetc2l_enter_room::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_enter_room::room_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_enter_room.room_id)
  return room_id_;
}
inline void packetc2l_enter_room::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_enter_room.room_id)
}

// optional string password = 3;
inline bool packetc2l_enter_room::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_enter_room::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_enter_room::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_enter_room::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& packetc2l_enter_room::password() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_enter_room.password)
  return *password_;
}
inline void packetc2l_enter_room::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_enter_room.password)
}
inline void packetc2l_enter_room::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_landlord_net_human_protocol.packetc2l_enter_room.password)
}
inline void packetc2l_enter_room::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_landlord_net_human_protocol.packetc2l_enter_room.password)
}
inline ::std::string* packetc2l_enter_room::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetc2l_enter_room.password)
  return password_;
}
inline ::std::string* packetc2l_enter_room::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2l_enter_room::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetc2l_enter_room.password)
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_enter_room_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_enter_room_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_enter_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_enter_room_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_enter_room_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_enter_room_result.result)
}

// repeated .game_landlord_net_human_protocol.player_info otherPlayerInfos = 3;
inline int packetl2c_enter_room_result::otherplayerinfos_size() const {
  return otherplayerinfos_.size();
}
inline void packetl2c_enter_room_result::clear_otherplayerinfos() {
  otherplayerinfos_.Clear();
}
inline const ::game_landlord_net_human_protocol::player_info& packetl2c_enter_room_result::otherplayerinfos(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_enter_room_result.otherPlayerInfos)
  return otherplayerinfos_.Get(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_enter_room_result::mutable_otherplayerinfos(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_enter_room_result.otherPlayerInfos)
  return otherplayerinfos_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_enter_room_result::add_otherplayerinfos() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_enter_room_result.otherPlayerInfos)
  return otherplayerinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
packetl2c_enter_room_result::otherplayerinfos() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_enter_room_result.otherPlayerInfos)
  return otherplayerinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
packetl2c_enter_room_result::mutable_otherplayerinfos() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_enter_room_result.otherPlayerInfos)
  return &otherplayerinfos_;
}

// optional .game_landlord_net_human_protocol.room_info roomInfo = 4;
inline bool packetl2c_enter_room_result::has_roominfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_enter_room_result::set_has_roominfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_enter_room_result::clear_has_roominfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_enter_room_result::clear_roominfo() {
  if (roominfo_ != NULL) roominfo_->::game_landlord_net_human_protocol::room_info::Clear();
  clear_has_roominfo();
}
inline const ::game_landlord_net_human_protocol::room_info& packetl2c_enter_room_result::roominfo() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_enter_room_result.roomInfo)
  return roominfo_ != NULL ? *roominfo_ : *default_instance_->roominfo_;
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_enter_room_result::mutable_roominfo() {
  set_has_roominfo();
  if (roominfo_ == NULL) roominfo_ = new ::game_landlord_net_human_protocol::room_info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_enter_room_result.roomInfo)
  return roominfo_;
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_enter_room_result::release_roominfo() {
  clear_has_roominfo();
  ::game_landlord_net_human_protocol::room_info* temp = roominfo_;
  roominfo_ = NULL;
  return temp;
}
inline void packetl2c_enter_room_result::set_allocated_roominfo(::game_landlord_net_human_protocol::room_info* roominfo) {
  delete roominfo_;
  roominfo_ = roominfo;
  if (roominfo) {
    set_has_roominfo();
  } else {
    clear_has_roominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_enter_room_result.roomInfo)
}

// optional int32 deskId = 5;
inline bool packetl2c_enter_room_result::has_deskid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_enter_room_result::set_has_deskid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_enter_room_result::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_enter_room_result::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 packetl2c_enter_room_result::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_enter_room_result.deskId)
  return deskid_;
}
inline void packetl2c_enter_room_result::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_enter_room_result.deskId)
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_leave_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_leave_room.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_leave_room.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_leave_room_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_leave_room_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_leave_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_leave_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_leave_room_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_leave_room_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_leave_room_result.result)
}

// -------------------------------------------------------------------

// packetc2l_get_room_scene_info

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
inline bool packetc2l_get_room_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_get_room_scene_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_get_room_scene_info.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_scene_info::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_get_room_scene_info.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_get_room_scene_info_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
inline bool packetl2c_get_room_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_get_room_scene_info_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_scene_info_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.packet_id)
}

// optional .game_landlord_net_human_protocol.room_info m_roomInfo = 2;
inline bool packetl2c_get_room_scene_info_result::has_m_roominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_m_roominfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_m_roominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_m_roominfo() {
  if (m_roominfo_ != NULL) m_roominfo_->::game_landlord_net_human_protocol::room_info::Clear();
  clear_has_m_roominfo();
}
inline const ::game_landlord_net_human_protocol::room_info& packetl2c_get_room_scene_info_result::m_roominfo() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.m_roomInfo)
  return m_roominfo_ != NULL ? *m_roominfo_ : *default_instance_->m_roominfo_;
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_get_room_scene_info_result::mutable_m_roominfo() {
  set_has_m_roominfo();
  if (m_roominfo_ == NULL) m_roominfo_ = new ::game_landlord_net_human_protocol::room_info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.m_roomInfo)
  return m_roominfo_;
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_get_room_scene_info_result::release_m_roominfo() {
  clear_has_m_roominfo();
  ::game_landlord_net_human_protocol::room_info* temp = m_roominfo_;
  m_roominfo_ = NULL;
  return temp;
}
inline void packetl2c_get_room_scene_info_result::set_allocated_m_roominfo(::game_landlord_net_human_protocol::room_info* m_roominfo) {
  delete m_roominfo_;
  m_roominfo_ = m_roominfo;
  if (m_roominfo) {
    set_has_m_roominfo();
  } else {
    clear_has_m_roominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.m_roomInfo)
}

// optional .game_landlord_net_human_protocol.e_game_state gameState = 3;
inline bool packetl2c_get_room_scene_info_result::has_gamestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_gamestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_get_room_scene_info_result::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
inline ::game_landlord_net_human_protocol::e_game_state packetl2c_get_room_scene_info_result::gamestate() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.gameState)
  return static_cast< ::game_landlord_net_human_protocol::e_game_state >(gamestate_);
}
inline void packetl2c_get_room_scene_info_result::set_gamestate(::game_landlord_net_human_protocol::e_game_state value) {
  assert(::game_landlord_net_human_protocol::e_game_state_IsValid(value));
  set_has_gamestate();
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.gameState)
}

// repeated int32 cards = 4;
inline int packetl2c_get_room_scene_info_result::cards_size() const {
  return cards_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::cards(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards)
  return cards_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards)
}
inline void packetl2c_get_room_scene_info_result::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::cards() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards)
  return &cards_;
}

// optional int32 opencard = 5;
inline bool packetl2c_get_room_scene_info_result::has_opencard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_opencard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_opencard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_get_room_scene_info_result::clear_opencard() {
  opencard_ = 0;
  clear_has_opencard();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::opencard() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.opencard)
  return opencard_;
}
inline void packetl2c_get_room_scene_info_result::set_opencard(::google::protobuf::int32 value) {
  set_has_opencard();
  opencard_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.opencard)
}

// repeated .game_landlord_net_human_protocol.card_Info_1 other_cards_info = 6;
inline int packetl2c_get_room_scene_info_result::other_cards_info_size() const {
  return other_cards_info_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_other_cards_info() {
  other_cards_info_.Clear();
}
inline const ::game_landlord_net_human_protocol::card_Info_1& packetl2c_get_room_scene_info_result::other_cards_info(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.other_cards_info)
  return other_cards_info_.Get(index);
}
inline ::game_landlord_net_human_protocol::card_Info_1* packetl2c_get_room_scene_info_result::mutable_other_cards_info(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.other_cards_info)
  return other_cards_info_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::card_Info_1* packetl2c_get_room_scene_info_result::add_other_cards_info() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.other_cards_info)
  return other_cards_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info_1 >&
packetl2c_get_room_scene_info_result::other_cards_info() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.other_cards_info)
  return other_cards_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info_1 >*
packetl2c_get_room_scene_info_result::mutable_other_cards_info() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.other_cards_info)
  return &other_cards_info_;
}

// repeated .game_landlord_net_human_protocol.player_info playerList = 7;
inline int packetl2c_get_room_scene_info_result::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_landlord_net_human_protocol::player_info& packetl2c_get_room_scene_info_result::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerList)
  return playerlist_.Get(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_get_room_scene_info_result::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerList)
  return playerlist_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_get_room_scene_info_result::add_playerlist() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerList)
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
packetl2c_get_room_scene_info_result::playerlist() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerList)
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
packetl2c_get_room_scene_info_result::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerList)
  return &playerlist_;
}

// optional int32 landlord_Id = 8;
inline bool packetl2c_get_room_scene_info_result::has_landlord_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_landlord_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_landlord_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_get_room_scene_info_result::clear_landlord_id() {
  landlord_id_ = 0;
  clear_has_landlord_id();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::landlord_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.landlord_Id)
  return landlord_id_;
}
inline void packetl2c_get_room_scene_info_result::set_landlord_id(::google::protobuf::int32 value) {
  set_has_landlord_id();
  landlord_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.landlord_Id)
}

// optional .game_landlord_net_human_protocol.card_Info lastPlayHand = 9;
inline bool packetl2c_get_room_scene_info_result::has_lastplayhand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_lastplayhand() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_lastplayhand() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_get_room_scene_info_result::clear_lastplayhand() {
  if (lastplayhand_ != NULL) lastplayhand_->::game_landlord_net_human_protocol::card_Info::Clear();
  clear_has_lastplayhand();
}
inline const ::game_landlord_net_human_protocol::card_Info& packetl2c_get_room_scene_info_result::lastplayhand() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.lastPlayHand)
  return lastplayhand_ != NULL ? *lastplayhand_ : *default_instance_->lastplayhand_;
}
inline ::game_landlord_net_human_protocol::card_Info* packetl2c_get_room_scene_info_result::mutable_lastplayhand() {
  set_has_lastplayhand();
  if (lastplayhand_ == NULL) lastplayhand_ = new ::game_landlord_net_human_protocol::card_Info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.lastPlayHand)
  return lastplayhand_;
}
inline ::game_landlord_net_human_protocol::card_Info* packetl2c_get_room_scene_info_result::release_lastplayhand() {
  clear_has_lastplayhand();
  ::game_landlord_net_human_protocol::card_Info* temp = lastplayhand_;
  lastplayhand_ = NULL;
  return temp;
}
inline void packetl2c_get_room_scene_info_result::set_allocated_lastplayhand(::game_landlord_net_human_protocol::card_Info* lastplayhand) {
  delete lastplayhand_;
  lastplayhand_ = lastplayhand;
  if (lastplayhand) {
    set_has_lastplayhand();
  } else {
    clear_has_lastplayhand();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.lastPlayHand)
}

// repeated int32 cards_1 = 10;
inline int packetl2c_get_room_scene_info_result::cards_1_size() const {
  return cards_1_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_cards_1() {
  cards_1_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::cards_1(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards_1)
  return cards_1_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_cards_1(int index, ::google::protobuf::int32 value) {
  cards_1_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards_1)
}
inline void packetl2c_get_room_scene_info_result::add_cards_1(::google::protobuf::int32 value) {
  cards_1_.Add(value);
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards_1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::cards_1() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards_1)
  return cards_1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_cards_1() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cards_1)
  return &cards_1_;
}

// optional int32 cdTime = 11;
inline bool packetl2c_get_room_scene_info_result::has_cdtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_cdtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void packetl2c_get_room_scene_info_result::clear_cdtime() {
  cdtime_ = 0;
  clear_has_cdtime();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::cdtime() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cdTime)
  return cdtime_;
}
inline void packetl2c_get_room_scene_info_result::set_cdtime(::google::protobuf::int32 value) {
  set_has_cdtime();
  cdtime_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.cdTime)
}

// optional .game_landlord_net_human_protocol.e_player_game_state playerState = 12;
inline bool packetl2c_get_room_scene_info_result::has_playerstate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_playerstate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_playerstate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void packetl2c_get_room_scene_info_result::clear_playerstate() {
  playerstate_ = 0;
  clear_has_playerstate();
}
inline ::game_landlord_net_human_protocol::e_player_game_state packetl2c_get_room_scene_info_result::playerstate() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerState)
  return static_cast< ::game_landlord_net_human_protocol::e_player_game_state >(playerstate_);
}
inline void packetl2c_get_room_scene_info_result::set_playerstate(::game_landlord_net_human_protocol::e_player_game_state value) {
  assert(::game_landlord_net_human_protocol::e_player_game_state_IsValid(value));
  set_has_playerstate();
  playerstate_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.playerState)
}

// optional int32 current_who_robLandlording = 13;
inline bool packetl2c_get_room_scene_info_result::has_current_who_roblandlording() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_current_who_roblandlording() {
  _has_bits_[0] |= 0x00001000u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_current_who_roblandlording() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void packetl2c_get_room_scene_info_result::clear_current_who_roblandlording() {
  current_who_roblandlording_ = 0;
  clear_has_current_who_roblandlording();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::current_who_roblandlording() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.current_who_robLandlording)
  return current_who_roblandlording_;
}
inline void packetl2c_get_room_scene_info_result::set_current_who_roblandlording(::google::protobuf::int32 value) {
  set_has_current_who_roblandlording();
  current_who_roblandlording_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.current_who_robLandlording)
}

// optional int32 current_who_playhanding = 14;
inline bool packetl2c_get_room_scene_info_result::has_current_who_playhanding() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_current_who_playhanding() {
  _has_bits_[0] |= 0x00002000u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_current_who_playhanding() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void packetl2c_get_room_scene_info_result::clear_current_who_playhanding() {
  current_who_playhanding_ = 0;
  clear_has_current_who_playhanding();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::current_who_playhanding() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.current_who_playhanding)
  return current_who_playhanding_;
}
inline void packetl2c_get_room_scene_info_result::set_current_who_playhanding(::google::protobuf::int32 value) {
  set_has_current_who_playhanding();
  current_who_playhanding_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.current_who_playhanding)
}

// optional int32 score = 15;
inline bool packetl2c_get_room_scene_info_result::has_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void packetl2c_get_room_scene_info_result::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::score() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.score)
  return score_;
}
inline void packetl2c_get_room_scene_info_result::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.score)
}

// optional bool orHang = 16;
inline bool packetl2c_get_room_scene_info_result::has_orhang() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_orhang() {
  _has_bits_[0] |= 0x00008000u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_orhang() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void packetl2c_get_room_scene_info_result::clear_orhang() {
  orhang_ = false;
  clear_has_orhang();
}
inline bool packetl2c_get_room_scene_info_result::orhang() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.orHang)
  return orhang_;
}
inline void packetl2c_get_room_scene_info_result::set_orhang(bool value) {
  set_has_orhang();
  orhang_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_get_room_scene_info_result.orHang)
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_check_state::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_check_state.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_check_state.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_check_state_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_check_state_result.packet_id)
}

// optional bool is_intable = 2;
inline bool packetl2c_check_state_result::has_is_intable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_is_intable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_is_intable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_is_intable() {
  is_intable_ = false;
  clear_has_is_intable();
}
inline bool packetl2c_check_state_result::is_intable() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_check_state_result.is_intable)
  return is_intable_;
}
inline void packetl2c_check_state_result::set_is_intable(bool value) {
  set_has_is_intable();
  is_intable_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_check_state_result.is_intable)
}

// -------------------------------------------------------------------

// packetc2l_rob_landlord

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_rob_landlord];
inline bool packetc2l_rob_landlord::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_rob_landlord::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_rob_landlord::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_rob_landlord::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_rob_landlord::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_rob_landlord.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_rob_landlord::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_rob_landlord.packet_id)
}

// optional int32 or_Rob = 2;
inline bool packetc2l_rob_landlord::has_or_rob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_rob_landlord::set_has_or_rob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_rob_landlord::clear_has_or_rob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_rob_landlord::clear_or_rob() {
  or_rob_ = 0;
  clear_has_or_rob();
}
inline ::google::protobuf::int32 packetc2l_rob_landlord::or_rob() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_rob_landlord.or_Rob)
  return or_rob_;
}
inline void packetc2l_rob_landlord::set_or_rob(::google::protobuf::int32 value) {
  set_has_or_rob();
  or_rob_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_rob_landlord.or_Rob)
}

// -------------------------------------------------------------------

// packetc2l_playhand

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_playhand];
inline bool packetc2l_playhand::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_playhand::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_playhand::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_playhand::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetc2l_playhand::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_playhand.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetc2l_playhand::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetc2l_playhand.packet_id)
}

// optional .game_landlord_net_human_protocol.card_Info cards = 2;
inline bool packetc2l_playhand::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_playhand::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_playhand::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_playhand::clear_cards() {
  if (cards_ != NULL) cards_->::game_landlord_net_human_protocol::card_Info::Clear();
  clear_has_cards();
}
inline const ::game_landlord_net_human_protocol::card_Info& packetc2l_playhand::cards() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetc2l_playhand.cards)
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::game_landlord_net_human_protocol::card_Info* packetc2l_playhand::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::game_landlord_net_human_protocol::card_Info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetc2l_playhand.cards)
  return cards_;
}
inline ::game_landlord_net_human_protocol::card_Info* packetc2l_playhand::release_cards() {
  clear_has_cards();
  ::game_landlord_net_human_protocol::card_Info* temp = cards_;
  cards_ = NULL;
  return temp;
}
inline void packetc2l_playhand::set_allocated_cards(::game_landlord_net_human_protocol::card_Info* cards) {
  delete cards_;
  cards_ = cards;
  if (cards) {
    set_has_cards();
  } else {
    clear_has_cards();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetc2l_playhand.cards)
}

// -------------------------------------------------------------------

// packetl2c_notice_startgame

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_startgame];
inline bool packetl2c_notice_startgame::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_startgame::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_startgame::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_startgame::clear_packet_id() {
  packet_id_ = 15101;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_startgame::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_startgame::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_startgame.packet_id)
}

// repeated int32 cards = 2;
inline int packetl2c_notice_startgame::cards_size() const {
  return cards_.size();
}
inline void packetl2c_notice_startgame::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 packetl2c_notice_startgame::cards(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards)
  return cards_.Get(index);
}
inline void packetl2c_notice_startgame::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards)
}
inline void packetl2c_notice_startgame::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_notice_startgame::cards() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_notice_startgame::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards)
  return &cards_;
}

// optional int32 opencard = 3;
inline bool packetl2c_notice_startgame::has_opencard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_startgame::set_has_opencard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_startgame::clear_has_opencard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_startgame::clear_opencard() {
  opencard_ = 0;
  clear_has_opencard();
}
inline ::google::protobuf::int32 packetl2c_notice_startgame::opencard() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.opencard)
  return opencard_;
}
inline void packetl2c_notice_startgame::set_opencard(::google::protobuf::int32 value) {
  set_has_opencard();
  opencard_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_startgame.opencard)
}

// repeated int32 cards_1 = 4;
inline int packetl2c_notice_startgame::cards_1_size() const {
  return cards_1_.size();
}
inline void packetl2c_notice_startgame::clear_cards_1() {
  cards_1_.Clear();
}
inline ::google::protobuf::int32 packetl2c_notice_startgame::cards_1(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards_1)
  return cards_1_.Get(index);
}
inline void packetl2c_notice_startgame::set_cards_1(int index, ::google::protobuf::int32 value) {
  cards_1_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards_1)
}
inline void packetl2c_notice_startgame::add_cards_1(::google::protobuf::int32 value) {
  cards_1_.Add(value);
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards_1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_notice_startgame::cards_1() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards_1)
  return cards_1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_notice_startgame::mutable_cards_1() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_notice_startgame.cards_1)
  return &cards_1_;
}

// repeated .game_landlord_net_human_protocol.player_info playerList = 5;
inline int packetl2c_notice_startgame::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_notice_startgame::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_landlord_net_human_protocol::player_info& packetl2c_notice_startgame::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.playerList)
  return playerlist_.Get(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_notice_startgame::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_startgame.playerList)
  return playerlist_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_notice_startgame::add_playerlist() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_notice_startgame.playerList)
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >&
packetl2c_notice_startgame::playerlist() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_notice_startgame.playerList)
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::player_info >*
packetl2c_notice_startgame::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_notice_startgame.playerList)
  return &playerlist_;
}

// optional int32 landlord_Id = 6;
inline bool packetl2c_notice_startgame::has_landlord_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_notice_startgame::set_has_landlord_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_notice_startgame::clear_has_landlord_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_notice_startgame::clear_landlord_id() {
  landlord_id_ = 0;
  clear_has_landlord_id();
}
inline ::google::protobuf::int32 packetl2c_notice_startgame::landlord_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.landlord_Id)
  return landlord_id_;
}
inline void packetl2c_notice_startgame::set_landlord_id(::google::protobuf::int32 value) {
  set_has_landlord_id();
  landlord_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_startgame.landlord_Id)
}

// optional int32 min_score = 7;
inline bool packetl2c_notice_startgame::has_min_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_notice_startgame::set_has_min_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_notice_startgame::clear_has_min_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_notice_startgame::clear_min_score() {
  min_score_ = 0;
  clear_has_min_score();
}
inline ::google::protobuf::int32 packetl2c_notice_startgame::min_score() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_startgame.min_score)
  return min_score_;
}
inline void packetl2c_notice_startgame::set_min_score(::google::protobuf::int32 value) {
  set_has_min_score();
  min_score_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_startgame.min_score)
}

// -------------------------------------------------------------------

// packetl2c_notice_who_playhand

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_playhand];
inline bool packetl2c_notice_who_playhand::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_who_playhand::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_who_playhand::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_who_playhand::clear_packet_id() {
  packet_id_ = 15106;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_who_playhand::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_who_playhand.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_who_playhand::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_who_playhand.packet_id)
}

// optional int32 deskId = 2;
inline bool packetl2c_notice_who_playhand::has_deskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_who_playhand::set_has_deskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_who_playhand::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_who_playhand::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 packetl2c_notice_who_playhand::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_who_playhand.deskId)
  return deskid_;
}
inline void packetl2c_notice_who_playhand::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_who_playhand.deskId)
}

// -------------------------------------------------------------------

// packetl2c_notice_playhand

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_playhand];
inline bool packetl2c_notice_playhand::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_playhand::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_playhand::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_playhand::clear_packet_id() {
  packet_id_ = 15102;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_playhand::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_playhand.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_playhand::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_playhand.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_notice_playhand::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_playhand::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_playhand::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_playhand::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_notice_playhand::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_playhand.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_notice_playhand::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_playhand.result)
}

// optional .game_landlord_net_human_protocol.card_Info cards = 3;
inline bool packetl2c_notice_playhand::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_playhand::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_playhand::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_playhand::clear_cards() {
  if (cards_ != NULL) cards_->::game_landlord_net_human_protocol::card_Info::Clear();
  clear_has_cards();
}
inline const ::game_landlord_net_human_protocol::card_Info& packetl2c_notice_playhand::cards() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_playhand.cards)
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::game_landlord_net_human_protocol::card_Info* packetl2c_notice_playhand::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::game_landlord_net_human_protocol::card_Info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_playhand.cards)
  return cards_;
}
inline ::game_landlord_net_human_protocol::card_Info* packetl2c_notice_playhand::release_cards() {
  clear_has_cards();
  ::game_landlord_net_human_protocol::card_Info* temp = cards_;
  cards_ = NULL;
  return temp;
}
inline void packetl2c_notice_playhand::set_allocated_cards(::game_landlord_net_human_protocol::card_Info* cards) {
  delete cards_;
  cards_ = cards;
  if (cards) {
    set_has_cards();
  } else {
    clear_has_cards();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_notice_playhand.cards)
}

// -------------------------------------------------------------------

// packetl2c_notice_rob_landlord

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord];
inline bool packetl2c_notice_rob_landlord::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_rob_landlord::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_rob_landlord::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_rob_landlord::clear_packet_id() {
  packet_id_ = 15103;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_rob_landlord::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_rob_landlord::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord.packet_id)
}

// optional int32 deskId = 2;
inline bool packetl2c_notice_rob_landlord::has_deskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_rob_landlord::set_has_deskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_rob_landlord::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_rob_landlord::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 packetl2c_notice_rob_landlord::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord.deskId)
  return deskid_;
}
inline void packetl2c_notice_rob_landlord::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord.deskId)
}

// -------------------------------------------------------------------

// packetl2c_notice_rob_landlord_result

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord_result];
inline bool packetl2c_notice_rob_landlord_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_rob_landlord_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_rob_landlord_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_rob_landlord_result::clear_packet_id() {
  packet_id_ = 15105;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_rob_landlord_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_rob_landlord_result::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_notice_rob_landlord_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_rob_landlord_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_rob_landlord_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_rob_landlord_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_notice_rob_landlord_result::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_notice_rob_landlord_result::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.result)
}

// optional int32 deskId = 3;
inline bool packetl2c_notice_rob_landlord_result::has_deskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_rob_landlord_result::set_has_deskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_rob_landlord_result::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_rob_landlord_result::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 packetl2c_notice_rob_landlord_result::deskid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.deskId)
  return deskid_;
}
inline void packetl2c_notice_rob_landlord_result::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.deskId)
}

// optional int32 or_Rob = 4;
inline bool packetl2c_notice_rob_landlord_result::has_or_rob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_rob_landlord_result::set_has_or_rob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_rob_landlord_result::clear_has_or_rob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_rob_landlord_result::clear_or_rob() {
  or_rob_ = 0;
  clear_has_or_rob();
}
inline ::google::protobuf::int32 packetl2c_notice_rob_landlord_result::or_rob() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.or_Rob)
  return or_rob_;
}
inline void packetl2c_notice_rob_landlord_result::set_or_rob(::google::protobuf::int32 value) {
  set_has_or_rob();
  or_rob_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_rob_landlord_result.or_Rob)
}

// -------------------------------------------------------------------

// packetl2c_notice_winlose

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_winlose];
inline bool packetl2c_notice_winlose::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_winlose::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_winlose::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_winlose::clear_packet_id() {
  packet_id_ = 15104;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_winlose::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_winlose.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_winlose::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_winlose.packet_id)
}

// repeated .game_landlord_net_human_protocol.desk_award_Info m_desk_awards = 2;
inline int packetl2c_notice_winlose::m_desk_awards_size() const {
  return m_desk_awards_.size();
}
inline void packetl2c_notice_winlose::clear_m_desk_awards() {
  m_desk_awards_.Clear();
}
inline const ::game_landlord_net_human_protocol::desk_award_Info& packetl2c_notice_winlose::m_desk_awards(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_winlose.m_desk_awards)
  return m_desk_awards_.Get(index);
}
inline ::game_landlord_net_human_protocol::desk_award_Info* packetl2c_notice_winlose::mutable_m_desk_awards(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_winlose.m_desk_awards)
  return m_desk_awards_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::desk_award_Info* packetl2c_notice_winlose::add_m_desk_awards() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_notice_winlose.m_desk_awards)
  return m_desk_awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::desk_award_Info >&
packetl2c_notice_winlose::m_desk_awards() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_notice_winlose.m_desk_awards)
  return m_desk_awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::desk_award_Info >*
packetl2c_notice_winlose::mutable_m_desk_awards() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_notice_winlose.m_desk_awards)
  return &m_desk_awards_;
}

// repeated .game_landlord_net_human_protocol.card_Info remain_cards = 3;
inline int packetl2c_notice_winlose::remain_cards_size() const {
  return remain_cards_.size();
}
inline void packetl2c_notice_winlose::clear_remain_cards() {
  remain_cards_.Clear();
}
inline const ::game_landlord_net_human_protocol::card_Info& packetl2c_notice_winlose::remain_cards(int index) const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_winlose.remain_cards)
  return remain_cards_.Get(index);
}
inline ::game_landlord_net_human_protocol::card_Info* packetl2c_notice_winlose::mutable_remain_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_winlose.remain_cards)
  return remain_cards_.Mutable(index);
}
inline ::game_landlord_net_human_protocol::card_Info* packetl2c_notice_winlose::add_remain_cards() {
  // @@protoc_insertion_point(field_add:game_landlord_net_human_protocol.packetl2c_notice_winlose.remain_cards)
  return remain_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info >&
packetl2c_notice_winlose::remain_cards() const {
  // @@protoc_insertion_point(field_list:game_landlord_net_human_protocol.packetl2c_notice_winlose.remain_cards)
  return remain_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_landlord_net_human_protocol::card_Info >*
packetl2c_notice_winlose::mutable_remain_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_landlord_net_human_protocol.packetl2c_notice_winlose.remain_cards)
  return &remain_cards_;
}

// -------------------------------------------------------------------

// packetl2c_notice_SystemTalk

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_SystemTalk];
inline bool packetl2c_notice_SystemTalk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_SystemTalk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_SystemTalk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_SystemTalk::clear_packet_id() {
  packet_id_ = 15107;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_SystemTalk::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_SystemTalk.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_SystemTalk::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_SystemTalk.packet_id)
}

// optional int32 talk_Id = 2;
inline bool packetl2c_notice_SystemTalk::has_talk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_SystemTalk::set_has_talk_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_SystemTalk::clear_has_talk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_SystemTalk::clear_talk_id() {
  talk_id_ = 0;
  clear_has_talk_id();
}
inline ::google::protobuf::int32 packetl2c_notice_SystemTalk::talk_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_SystemTalk.talk_Id)
  return talk_id_;
}
inline void packetl2c_notice_SystemTalk::set_talk_id(::google::protobuf::int32 value) {
  set_has_talk_id();
  talk_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_SystemTalk.talk_Id)
}

// -------------------------------------------------------------------

// packetl2c_notice_room_enter_leave_info

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_room_enter_leave_info];
inline bool packetl2c_notice_room_enter_leave_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_room_enter_leave_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_room_enter_leave_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_room_enter_leave_info::clear_packet_id() {
  packet_id_ = 15108;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_room_enter_leave_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_room_enter_leave_info::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.packet_id)
}

// optional int32 action = 2;
inline bool packetl2c_notice_room_enter_leave_info::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_room_enter_leave_info::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_room_enter_leave_info::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_room_enter_leave_info::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 packetl2c_notice_room_enter_leave_info::action() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.action)
  return action_;
}
inline void packetl2c_notice_room_enter_leave_info::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.action)
}

// optional .game_landlord_net_human_protocol.player_info playerInfo = 3;
inline bool packetl2c_notice_room_enter_leave_info::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_room_enter_leave_info::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_room_enter_leave_info::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_room_enter_leave_info::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::game_landlord_net_human_protocol::player_info::Clear();
  clear_has_playerinfo();
}
inline const ::game_landlord_net_human_protocol::player_info& packetl2c_notice_room_enter_leave_info::playerinfo() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.playerInfo)
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_notice_room_enter_leave_info::mutable_playerinfo() {
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::game_landlord_net_human_protocol::player_info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.playerInfo)
  return playerinfo_;
}
inline ::game_landlord_net_human_protocol::player_info* packetl2c_notice_room_enter_leave_info::release_playerinfo() {
  clear_has_playerinfo();
  ::game_landlord_net_human_protocol::player_info* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void packetl2c_notice_room_enter_leave_info::set_allocated_playerinfo(::game_landlord_net_human_protocol::player_info* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_notice_room_enter_leave_info.playerInfo)
}

// -------------------------------------------------------------------

// packetl2c_notice_room_prepare_info

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_room_prepare_info];
inline bool packetl2c_notice_room_prepare_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_room_prepare_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_room_prepare_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_room_prepare_info::clear_packet_id() {
  packet_id_ = 15109;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_room_prepare_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_room_prepare_info::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.packet_id)
}

// optional .game_landlord_net_human_protocol.e_server_error_code result = 2 [default = e_error_code_success];
inline bool packetl2c_notice_room_prepare_info::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_room_prepare_info::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_room_prepare_info::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_room_prepare_info::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::game_landlord_net_human_protocol::e_server_error_code packetl2c_notice_room_prepare_info::result() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.result)
  return static_cast< ::game_landlord_net_human_protocol::e_server_error_code >(result_);
}
inline void packetl2c_notice_room_prepare_info::set_result(::game_landlord_net_human_protocol::e_server_error_code value) {
  assert(::game_landlord_net_human_protocol::e_server_error_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.result)
}

// optional int32 action = 3;
inline bool packetl2c_notice_room_prepare_info::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_room_prepare_info::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_room_prepare_info::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_room_prepare_info::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 packetl2c_notice_room_prepare_info::action() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.action)
  return action_;
}
inline void packetl2c_notice_room_prepare_info::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.action)
}

// optional int32 playerId = 4;
inline bool packetl2c_notice_room_prepare_info::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_room_prepare_info::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_room_prepare_info::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_room_prepare_info::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetl2c_notice_room_prepare_info::playerid() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.playerId)
  return playerid_;
}
inline void packetl2c_notice_room_prepare_info::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_prepare_info.playerId)
}

// -------------------------------------------------------------------

// packetl2c_notice_room_change_info

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_room_change_info];
inline bool packetl2c_notice_room_change_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_room_change_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_room_change_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_room_change_info::clear_packet_id() {
  packet_id_ = 15110;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_room_change_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_room_change_info::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.packet_id)
}

// optional int32 action = 2;
inline bool packetl2c_notice_room_change_info::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_room_change_info::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_room_change_info::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_room_change_info::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 packetl2c_notice_room_change_info::action() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.action)
  return action_;
}
inline void packetl2c_notice_room_change_info::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.action)
}

// optional .game_landlord_net_human_protocol.room_info roomInfo = 3;
inline bool packetl2c_notice_room_change_info::has_roominfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_room_change_info::set_has_roominfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_room_change_info::clear_has_roominfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_room_change_info::clear_roominfo() {
  if (roominfo_ != NULL) roominfo_->::game_landlord_net_human_protocol::room_info::Clear();
  clear_has_roominfo();
}
inline const ::game_landlord_net_human_protocol::room_info& packetl2c_notice_room_change_info::roominfo() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.roomInfo)
  return roominfo_ != NULL ? *roominfo_ : *default_instance_->roominfo_;
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_notice_room_change_info::mutable_roominfo() {
  set_has_roominfo();
  if (roominfo_ == NULL) roominfo_ = new ::game_landlord_net_human_protocol::room_info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.roomInfo)
  return roominfo_;
}
inline ::game_landlord_net_human_protocol::room_info* packetl2c_notice_room_change_info::release_roominfo() {
  clear_has_roominfo();
  ::game_landlord_net_human_protocol::room_info* temp = roominfo_;
  roominfo_ = NULL;
  return temp;
}
inline void packetl2c_notice_room_change_info::set_allocated_roominfo(::game_landlord_net_human_protocol::room_info* roominfo) {
  delete roominfo_;
  roominfo_ = roominfo;
  if (roominfo) {
    set_has_roominfo();
  } else {
    clear_has_roominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_notice_room_change_info.roomInfo)
}

// -------------------------------------------------------------------

// packetl2c_notice_invite_room_list

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_invite_room_list];
inline bool packetl2c_notice_invite_room_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_invite_room_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_invite_room_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_invite_room_list::clear_packet_id() {
  packet_id_ = 15111;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_invite_room_list::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_invite_room_list.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_invite_room_list::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_invite_room_list.packet_id)
}

// optional .game_landlord_net_human_protocol.invitation_info inviteInfo = 2;
inline bool packetl2c_notice_invite_room_list::has_inviteinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_invite_room_list::set_has_inviteinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_invite_room_list::clear_has_inviteinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_invite_room_list::clear_inviteinfo() {
  if (inviteinfo_ != NULL) inviteinfo_->::game_landlord_net_human_protocol::invitation_info::Clear();
  clear_has_inviteinfo();
}
inline const ::game_landlord_net_human_protocol::invitation_info& packetl2c_notice_invite_room_list::inviteinfo() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_invite_room_list.inviteInfo)
  return inviteinfo_ != NULL ? *inviteinfo_ : *default_instance_->inviteinfo_;
}
inline ::game_landlord_net_human_protocol::invitation_info* packetl2c_notice_invite_room_list::mutable_inviteinfo() {
  set_has_inviteinfo();
  if (inviteinfo_ == NULL) inviteinfo_ = new ::game_landlord_net_human_protocol::invitation_info;
  // @@protoc_insertion_point(field_mutable:game_landlord_net_human_protocol.packetl2c_notice_invite_room_list.inviteInfo)
  return inviteinfo_;
}
inline ::game_landlord_net_human_protocol::invitation_info* packetl2c_notice_invite_room_list::release_inviteinfo() {
  clear_has_inviteinfo();
  ::game_landlord_net_human_protocol::invitation_info* temp = inviteinfo_;
  inviteinfo_ = NULL;
  return temp;
}
inline void packetl2c_notice_invite_room_list::set_allocated_inviteinfo(::game_landlord_net_human_protocol::invitation_info* inviteinfo) {
  delete inviteinfo_;
  inviteinfo_ = inviteinfo;
  if (inviteinfo) {
    set_has_inviteinfo();
  } else {
    clear_has_inviteinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_landlord_net_human_protocol.packetl2c_notice_invite_room_list.inviteInfo)
}

// -------------------------------------------------------------------

// packetl2c_notice_who_is_roomcreator

// optional .game_landlord_net_human_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_is_roomcreator];
inline bool packetl2c_notice_who_is_roomcreator::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_who_is_roomcreator::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_who_is_roomcreator::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_who_is_roomcreator::clear_packet_id() {
  packet_id_ = 15112;
  clear_has_packet_id();
}
inline ::game_landlord_net_human_protocol::e_server_msg_type packetl2c_notice_who_is_roomcreator::packet_id() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_who_is_roomcreator.packet_id)
  return static_cast< ::game_landlord_net_human_protocol::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_who_is_roomcreator::set_packet_id(::game_landlord_net_human_protocol::e_server_msg_type value) {
  assert(::game_landlord_net_human_protocol::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_who_is_roomcreator.packet_id)
}

// optional int32 room_creator = 2;
inline bool packetl2c_notice_who_is_roomcreator::has_room_creator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_who_is_roomcreator::set_has_room_creator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_who_is_roomcreator::clear_has_room_creator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_who_is_roomcreator::clear_room_creator() {
  room_creator_ = 0;
  clear_has_room_creator();
}
inline ::google::protobuf::int32 packetl2c_notice_who_is_roomcreator::room_creator() const {
  // @@protoc_insertion_point(field_get:game_landlord_net_human_protocol.packetl2c_notice_who_is_roomcreator.room_creator)
  return room_creator_;
}
inline void packetl2c_notice_who_is_roomcreator::set_room_creator(::google::protobuf::int32 value) {
  set_has_room_creator();
  room_creator_ = value;
  // @@protoc_insertion_point(field_set:game_landlord_net_human_protocol.packetl2c_notice_who_is_roomcreator.room_creator)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_landlord_net_human_protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5flandlord_5fnet_5fhuman_5fprotocol_2eproto__INCLUDED
