// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_landlord_net_human_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_landlord_net_human_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_landlord_net_human_protocol {

namespace {

const ::google::protobuf::Descriptor* card_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* card_Info_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_Info_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* desk_award_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  desk_award_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* invitation_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invitation_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_server_error_code_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_game_state_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_player_game_state_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto() {
  protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_landlord_net_human_def.proto");
  GOOGLE_CHECK(file != NULL);
  card_Info_descriptor_ = file->message_type(0);
  static const int card_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, cards_),
  };
  card_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_Info_descriptor_,
      card_Info::default_instance_,
      card_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_Info));
  card_Info_1_descriptor_ = file->message_type(1);
  static const int card_Info_1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info_1, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info_1, cards_count_),
  };
  card_Info_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_Info_1_descriptor_,
      card_Info_1::default_instance_,
      card_Info_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_Info_1));
  desk_award_Info_descriptor_ = file->message_type(2);
  static const int desk_award_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(desk_award_Info, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(desk_award_Info, win_count_),
  };
  desk_award_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      desk_award_Info_descriptor_,
      desk_award_Info::default_instance_,
      desk_award_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(desk_award_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(desk_award_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(desk_award_Info));
  player_info_descriptor_ = file->message_type(3);
  static const int player_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, orprepare_),
  };
  player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_info_descriptor_,
      player_info::default_instance_,
      player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_info));
  room_info_descriptor_ = file->message_type(4);
  static const int room_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, orneedpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, orshuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, room_creator_),
  };
  room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_info_descriptor_,
      room_info::default_instance_,
      room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_info));
  invitation_info_descriptor_ = file->message_type(5);
  static const int invitation_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invitation_info, senderinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invitation_info, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invitation_info, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invitation_info, count_),
  };
  invitation_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invitation_info_descriptor_,
      invitation_info::default_instance_,
      invitation_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invitation_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invitation_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invitation_info));
  e_server_msg_type_descriptor_ = file->enum_type(0);
  e_server_error_code_descriptor_ = file->enum_type(1);
  e_game_state_descriptor_ = file->enum_type(2);
  e_player_game_state_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_Info_descriptor_, &card_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_Info_1_descriptor_, &card_Info_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    desk_award_Info_descriptor_, &desk_award_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_info_descriptor_, &player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_info_descriptor_, &room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invitation_info_descriptor_, &invitation_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto() {
  delete card_Info::default_instance_;
  delete card_Info_reflection_;
  delete card_Info_1::default_instance_;
  delete card_Info_1_reflection_;
  delete desk_award_Info::default_instance_;
  delete desk_award_Info_reflection_;
  delete player_info::default_instance_;
  delete player_info_reflection_;
  delete room_info::default_instance_;
  delete room_info_reflection_;
  delete invitation_info::default_instance_;
  delete invitation_info_reflection_;
}

void protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!game_landlord_net_human_def.proto\022 gam"
    "e_landlord_net_human_protocol\"*\n\tcard_In"
    "fo\022\016\n\006deskId\030\001 \001(\005\022\r\n\005cards\030\002 \003(\005\"2\n\013car"
    "d_Info_1\022\016\n\006deskId\030\001 \001(\005\022\023\n\013cards_count\030"
    "\002 \001(\005\"4\n\017desk_award_Info\022\016\n\006deskId\030\001 \001(\005"
    "\022\021\n\twin_count\030\002 \001(\005\"\323\001\n\013player_info\022\021\n\tp"
    "layer_id\030\001 \001(\005\022\027\n\017player_nickname\030\002 \001(\t\022"
    "\031\n\021player_head_frame\030\003 \001(\005\022\032\n\022player_hea"
    "d_custom\030\004 \001(\t\022\023\n\013player_gold\030\005 \001(\003\022\022\n\np"
    "layer_sex\030\006 \001(\005\022\025\n\rplayer_vip_lv\030\007 \001(\005\022\016"
    "\n\006deskId\030\010 \001(\005\022\021\n\torPrepare\030\t \001(\010\"\253\001\n\tro"
    "om_info\022\017\n\007room_id\030\001 \001(\005\022\020\n\010roomName\030\002 \001"
    "(\t\022\024\n\014player_count\030\003 \001(\005\022\022\n\nroom_state\030\004"
    " \001(\005\022\026\n\016orNeedPassword\030\005 \001(\010\022\021\n\torShuffl"
    "e\030\006 \001(\010\022\020\n\010password\030\007 \001(\t\022\024\n\014room_creato"
    "r\030\010 \001(\005\"\205\001\n\017invitation_info\022A\n\nsenderInf"
    "o\030\001 \001(\0132-.game_landlord_net_human_protoc"
    "ol.player_info\022\016\n\006roomId\030\002 \001(\005\022\020\n\010roomNa"
    "me\030\003 \001(\t\022\r\n\005count\030\004 \001(\005*\376\n\n\021e_server_msg"
    "_type\022\024\n\017e_mst_start_c2l\020\220N\022\031\n\024e_mst_c2l"
    "_enter_room\020\221N\022\"\n\035e_mst_c2l_get_room_sce"
    "ne_info\020\222N\022\032\n\025e_mst_c2l_check_state\020\223N\022\031"
    "\n\024e_mst_c2l_leave_room\020\224N\022\033\n\026e_mst_c2l_r"
    "ob_landlord\020\225N\022\027\n\022e_mst_c2l_playhand\020\226N\022"
    "\023\n\016e_mst_c2l_Hang\020\230N\022\031\n\024e_mst_c2l_System"
    "Talk\020\231N\022\027\n\022e_mst_c2l_roomlist\020\232N\022\030\n\023e_ms"
    "t_c2l_add_robot\020\233N\022\032\n\025e_mst_c2l_kich_pla"
    "yer\020\234N\022\031\n\024e_mst_c2l_or_prepare\020\235N\022\037\n\032e_m"
    "st_c2l_join_player_list\020\236N\022\030\n\023e_mst_c2l_"
    "join_room\020\237N\022!\n\034e_mst_c2l_or_agree_join_"
    "room\020\240N\022\032\n\025e_mst_c2l_create_room\020\241N\022\032\n\025e"
    "_mst_c2l_change_desk\020\243N\022\024\n\017e_mst_start_l"
    "2c\020\230u\022\031\n\024e_mst_l2c_enter_room\020\231u\022\"\n\035e_ms"
    "t_l2c_get_room_scene_info\020\232u\022\032\n\025e_mst_l2"
    "c_check_state\020\233u\022\031\n\024e_mst_l2c_leave_room"
    "\020\234u\022\023\n\016e_mst_l2c_Hang\020\236u\022\027\n\022e_mst_l2c_ro"
    "omlist\020\237u\022\030\n\023e_mst_l2c_add_robot\020\240u\022\032\n\025e"
    "_mst_l2c_kich_player\020\241u\022&\n!e_mst_l2c_joi"
    "n_player_list_result\020\242u\022\037\n\032e_mst_l2c_joi"
    "n_room_result\020\243u\022(\n#e_mst_l2c_or_agree_j"
    "oin_room_result\020\244u\022\032\n\025e_mst_l2c_create_r"
    "oom\020\245u\022\032\n\025e_mst_l2c_change_desk\020\247u\022\037\n\032e_"
    "mst_l2c_notice_startgame\020\375u\022\036\n\031e_mst_l2c"
    "_notice_playhand\020\376u\022\"\n\035e_mst_l2c_notice_"
    "rob_landlord\020\377u\022\035\n\030e_mst_l2c_notice_winl"
    "ose\020\200v\022)\n$e_mst_l2c_notice_rob_landlord_"
    "result\020\201v\022\"\n\035e_mst_l2c_notice_who_playha"
    "nd\020\202v\022 \n\033e_mst_l2c_notice_SystemTalk\020\203v\022"
    "+\n&e_mst_l2c_notice_room_enter_leave_inf"
    "o\020\204v\022\'\n\"e_mst_l2c_notice_room_prepare_in"
    "fo\020\205v\022&\n!e_mst_l2c_notice_room_change_in"
    "fo\020\206v\022&\n!e_mst_l2c_notice_invite_room_li"
    "st\020\207v\022(\n#e_mst_l2c_notice_who_is_roomcre"
    "ator\020\210v\022\027\n\021e_mst_clend_index\020\240\234\001*k\n\023e_se"
    "rver_error_code\022\030\n\024e_error_code_success\020"
    "\001\022\027\n\023e_error_code_failed\020\002\022!\n\035e_error_co"
    "de_not_enough_money\020\003*\313\001\n\014e_game_state\022\025"
    "\n\021e_game_state_none\020\000\022\031\n\025e_game_state_ma"
    "tching\020\001\022\032\n\026e_game_state_startgame\020\002\022\034\n\030"
    "e_game_state_sendcarding\020\003\022\034\n\030e_game_sta"
    "te_robLandlore\020\004\022\031\n\025e_game_state_playhan"
    "d\020\005\022\026\n\022e_game_state_award\020\006*\274\002\n\023e_player"
    "_game_state\022\034\n\030e_player_game_state_none\020"
    "\000\022 \n\034e_player_game_state_matching\020\001\022#\n\037e"
    "_player_game_state_sendcarding\020\002\022#\n\037e_pl"
    "ayer_game_state_robLandlord\020\003\022)\n%e_playe"
    "r_game_state_other_robLandlord\020\004\022#\n\037e_pl"
    "ayer_game_state_playhanding\020\005\022)\n%e_playe"
    "r_game_state_other_playhanding\020\006\022 \n\034e_pl"
    "ayer_game_state_awarding\020\007", 2786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_landlord_net_human_def.proto", &protobuf_RegisterTypes);
  card_Info::default_instance_ = new card_Info();
  card_Info_1::default_instance_ = new card_Info_1();
  desk_award_Info::default_instance_ = new desk_award_Info();
  player_info::default_instance_ = new player_info();
  room_info::default_instance_ = new room_info();
  invitation_info::default_instance_ = new invitation_info();
  card_Info::default_instance_->InitAsDefaultInstance();
  card_Info_1::default_instance_->InitAsDefaultInstance();
  desk_award_Info::default_instance_->InitAsDefaultInstance();
  player_info::default_instance_->InitAsDefaultInstance();
  room_info::default_instance_->InitAsDefaultInstance();
  invitation_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5flandlord_5fnet_5fhuman_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5flandlord_5fnet_5fhuman_5fdef_2eproto {
  StaticDescriptorInitializer_game_5flandlord_5fnet_5fhuman_5fdef_2eproto() {
    protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5flandlord_5fnet_5fhuman_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10019:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15015:
    case 15101:
    case 15102:
    case 15103:
    case 15104:
    case 15105:
    case 15106:
    case 15107:
    case 15108:
    case 15109:
    case 15110:
    case 15111:
    case 15112:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_server_error_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_error_code_descriptor_;
}
bool e_server_error_code_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_game_state_descriptor_;
}
bool e_game_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_player_game_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_player_game_state_descriptor_;
}
bool e_player_game_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int card_Info::kDeskIdFieldNumber;
const int card_Info::kCardsFieldNumber;
#endif  // !_MSC_VER

card_Info::card_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_net_human_protocol.card_Info)
}

void card_Info::InitAsDefaultInstance() {
}

card_Info::card_Info(const card_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_net_human_protocol.card_Info)
}

void card_Info::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_Info::~card_Info() {
  // @@protoc_insertion_point(destructor:game_landlord_net_human_protocol.card_Info)
  SharedDtor();
}

void card_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void card_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_Info_descriptor_;
}

const card_Info& card_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  return *default_instance_;
}

card_Info* card_Info::default_instance_ = NULL;

card_Info* card_Info::New() const {
  return new card_Info;
}

void card_Info::Clear() {
  deskid_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_net_human_protocol.card_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (tag == 16) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_net_human_protocol.card_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_net_human_protocol.card_Info)
  return false;
#undef DO_
}

void card_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_net_human_protocol.card_Info)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_net_human_protocol.card_Info)
}

::google::protobuf::uint8* card_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_net_human_protocol.card_Info)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_net_human_protocol.card_Info)
  return target;
}

int card_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskId = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_Info::MergeFrom(const card_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_Info::CopyFrom(const card_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_Info::IsInitialized() const {

  return true;
}

void card_Info::Swap(card_Info* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_Info_descriptor_;
  metadata.reflection = card_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int card_Info_1::kDeskIdFieldNumber;
const int card_Info_1::kCardsCountFieldNumber;
#endif  // !_MSC_VER

card_Info_1::card_Info_1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_net_human_protocol.card_Info_1)
}

void card_Info_1::InitAsDefaultInstance() {
}

card_Info_1::card_Info_1(const card_Info_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_net_human_protocol.card_Info_1)
}

void card_Info_1::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  cards_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_Info_1::~card_Info_1() {
  // @@protoc_insertion_point(destructor:game_landlord_net_human_protocol.card_Info_1)
  SharedDtor();
}

void card_Info_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void card_Info_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_Info_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_Info_1_descriptor_;
}

const card_Info_1& card_Info_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  return *default_instance_;
}

card_Info_1* card_Info_1::default_instance_ = NULL;

card_Info_1* card_Info_1::New() const {
  return new card_Info_1;
}

void card_Info_1::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<card_Info_1*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(deskid_, cards_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_Info_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_net_human_protocol.card_Info_1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards_count;
        break;
      }

      // optional int32 cards_count = 2;
      case 2: {
        if (tag == 16) {
         parse_cards_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_count_)));
          set_has_cards_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_net_human_protocol.card_Info_1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_net_human_protocol.card_Info_1)
  return false;
#undef DO_
}

void card_Info_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_net_human_protocol.card_Info_1)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // optional int32 cards_count = 2;
  if (has_cards_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cards_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_net_human_protocol.card_Info_1)
}

::google::protobuf::uint8* card_Info_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_net_human_protocol.card_Info_1)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // optional int32 cards_count = 2;
  if (has_cards_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cards_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_net_human_protocol.card_Info_1)
  return target;
}

int card_Info_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskId = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 cards_count = 2;
    if (has_cards_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_Info_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_Info_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_Info_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_Info_1::MergeFrom(const card_Info_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_cards_count()) {
      set_cards_count(from.cards_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_Info_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_Info_1::CopyFrom(const card_Info_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_Info_1::IsInitialized() const {

  return true;
}

void card_Info_1::Swap(card_Info_1* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    std::swap(cards_count_, other->cards_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_Info_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_Info_1_descriptor_;
  metadata.reflection = card_Info_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int desk_award_Info::kDeskIdFieldNumber;
const int desk_award_Info::kWinCountFieldNumber;
#endif  // !_MSC_VER

desk_award_Info::desk_award_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_net_human_protocol.desk_award_Info)
}

void desk_award_Info::InitAsDefaultInstance() {
}

desk_award_Info::desk_award_Info(const desk_award_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_net_human_protocol.desk_award_Info)
}

void desk_award_Info::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  win_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

desk_award_Info::~desk_award_Info() {
  // @@protoc_insertion_point(destructor:game_landlord_net_human_protocol.desk_award_Info)
  SharedDtor();
}

void desk_award_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void desk_award_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* desk_award_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return desk_award_Info_descriptor_;
}

const desk_award_Info& desk_award_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  return *default_instance_;
}

desk_award_Info* desk_award_Info::default_instance_ = NULL;

desk_award_Info* desk_award_Info::New() const {
  return new desk_award_Info;
}

void desk_award_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<desk_award_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(deskid_, win_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool desk_award_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_net_human_protocol.desk_award_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_win_count;
        break;
      }

      // optional int32 win_count = 2;
      case 2: {
        if (tag == 16) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_net_human_protocol.desk_award_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_net_human_protocol.desk_award_Info)
  return false;
#undef DO_
}

void desk_award_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_net_human_protocol.desk_award_Info)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // optional int32 win_count = 2;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_net_human_protocol.desk_award_Info)
}

::google::protobuf::uint8* desk_award_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_net_human_protocol.desk_award_Info)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // optional int32 win_count = 2;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_net_human_protocol.desk_award_Info)
  return target;
}

int desk_award_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskId = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 win_count = 2;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void desk_award_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const desk_award_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const desk_award_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void desk_award_Info::MergeFrom(const desk_award_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void desk_award_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void desk_award_Info::CopyFrom(const desk_award_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool desk_award_Info::IsInitialized() const {

  return true;
}

void desk_award_Info::Swap(desk_award_Info* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    std::swap(win_count_, other->win_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata desk_award_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = desk_award_Info_descriptor_;
  metadata.reflection = desk_award_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_info::kPlayerIdFieldNumber;
const int player_info::kPlayerNicknameFieldNumber;
const int player_info::kPlayerHeadFrameFieldNumber;
const int player_info::kPlayerHeadCustomFieldNumber;
const int player_info::kPlayerGoldFieldNumber;
const int player_info::kPlayerSexFieldNumber;
const int player_info::kPlayerVipLvFieldNumber;
const int player_info::kDeskIdFieldNumber;
const int player_info::kOrPrepareFieldNumber;
#endif  // !_MSC_VER

player_info::player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_net_human_protocol.player_info)
}

void player_info::InitAsDefaultInstance() {
}

player_info::player_info(const player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_net_human_protocol.player_info)
}

void player_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_head_frame_ = 0;
  player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  player_vip_lv_ = 0;
  deskid_ = 0;
  orprepare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_info::~player_info() {
  // @@protoc_insertion_point(destructor:game_landlord_net_human_protocol.player_info)
  SharedDtor();
}

void player_info::SharedDtor() {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_nickname_;
  }
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_head_custom_;
  }
  if (this != default_instance_) {
  }
}

void player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_info_descriptor_;
}

const player_info& player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  return *default_instance_;
}

player_info* player_info::default_instance_ = NULL;

player_info* player_info::New() const {
  return new player_info;
}

void player_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<player_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(player_id_, player_head_frame_);
    ZR_(player_gold_, deskid_);
    if (has_player_nickname()) {
      if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_nickname_->clear();
      }
    }
    if (has_player_head_custom()) {
      if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_head_custom_->clear();
      }
    }
  }
  orprepare_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_net_human_protocol.player_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_nickname;
        break;
      }

      // optional string player_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_player_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_nickname().data(), this->player_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_head_frame;
        break;
      }

      // optional int32 player_head_frame = 3;
      case 3: {
        if (tag == 24) {
         parse_player_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_frame_)));
          set_has_player_head_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_head_custom;
        break;
      }

      // optional string player_head_custom = 4;
      case 4: {
        if (tag == 34) {
         parse_player_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_head_custom().data(), this->player_head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_head_custom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (tag == 40) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (tag == 48) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_player_vip_lv;
        break;
      }

      // optional int32 player_vip_lv = 7;
      case 7: {
        if (tag == 56) {
         parse_player_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_vip_lv_)));
          set_has_player_vip_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_deskId;
        break;
      }

      // optional int32 deskId = 8;
      case 8: {
        if (tag == 64) {
         parse_deskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_orPrepare;
        break;
      }

      // optional bool orPrepare = 9;
      case 9: {
        if (tag == 72) {
         parse_orPrepare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orprepare_)));
          set_has_orprepare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_net_human_protocol.player_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_net_human_protocol.player_info)
  return false;
#undef DO_
}

void player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_net_human_protocol.player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_nickname(), output);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_head_frame(), output);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_vip_lv(), output);
  }

  // optional int32 deskId = 8;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->deskid(), output);
  }

  // optional bool orPrepare = 9;
  if (has_orprepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->orprepare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_net_human_protocol.player_info)
}

::google::protobuf::uint8* player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_net_human_protocol.player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nickname(), target);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_head_frame(), target);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_vip_lv(), target);
  }

  // optional int32 deskId = 8;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->deskid(), target);
  }

  // optional bool orPrepare = 9;
  if (has_orprepare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->orprepare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_net_human_protocol.player_info)
  return target;
}

int player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_nickname = 2;
    if (has_player_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nickname());
    }

    // optional int32 player_head_frame = 3;
    if (has_player_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_frame());
    }

    // optional string player_head_custom = 4;
    if (has_player_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 player_vip_lv = 7;
    if (has_player_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_vip_lv());
    }

    // optional int32 deskId = 8;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool orPrepare = 9;
    if (has_orprepare()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_nickname()) {
      set_player_nickname(from.player_nickname());
    }
    if (from.has_player_head_frame()) {
      set_player_head_frame(from.player_head_frame());
    }
    if (from.has_player_head_custom()) {
      set_player_head_custom(from.player_head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_player_vip_lv()) {
      set_player_vip_lv(from.player_vip_lv());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orprepare()) {
      set_orprepare(from.orprepare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {

  return true;
}

void player_info::Swap(player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_nickname_, other->player_nickname_);
    std::swap(player_head_frame_, other->player_head_frame_);
    std::swap(player_head_custom_, other->player_head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(player_vip_lv_, other->player_vip_lv_);
    std::swap(deskid_, other->deskid_);
    std::swap(orprepare_, other->orprepare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_info_descriptor_;
  metadata.reflection = player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int room_info::kRoomIdFieldNumber;
const int room_info::kRoomNameFieldNumber;
const int room_info::kPlayerCountFieldNumber;
const int room_info::kRoomStateFieldNumber;
const int room_info::kOrNeedPasswordFieldNumber;
const int room_info::kOrShuffleFieldNumber;
const int room_info::kPasswordFieldNumber;
const int room_info::kRoomCreatorFieldNumber;
#endif  // !_MSC_VER

room_info::room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_net_human_protocol.room_info)
}

void room_info::InitAsDefaultInstance() {
}

room_info::room_info(const room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_net_human_protocol.room_info)
}

void room_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_count_ = 0;
  room_state_ = 0;
  orneedpassword_ = false;
  orshuffle_ = false;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_creator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_info::~room_info() {
  // @@protoc_insertion_point(destructor:game_landlord_net_human_protocol.room_info)
  SharedDtor();
}

void room_info::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_info_descriptor_;
}

const room_info& room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  return *default_instance_;
}

room_info* room_info::default_instance_ = NULL;

room_info* room_info::New() const {
  return new room_info;
}

void room_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<room_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(room_id_, orshuffle_);
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    room_creator_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_net_human_protocol.room_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // optional string roomName = 2;
      case 2: {
        if (tag == 18) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }

      // optional int32 player_count = 3;
      case 3: {
        if (tag == 24) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_room_state;
        break;
      }

      // optional int32 room_state = 4;
      case 4: {
        if (tag == 32) {
         parse_room_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_state_)));
          set_has_room_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_orNeedPassword;
        break;
      }

      // optional bool orNeedPassword = 5;
      case 5: {
        if (tag == 40) {
         parse_orNeedPassword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orneedpassword_)));
          set_has_orneedpassword();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_orShuffle;
        break;
      }

      // optional bool orShuffle = 6;
      case 6: {
        if (tag == 48) {
         parse_orShuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orshuffle_)));
          set_has_orshuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_password;
        break;
      }

      // optional string password = 7;
      case 7: {
        if (tag == 58) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_room_creator;
        break;
      }

      // optional int32 room_creator = 8;
      case 8: {
        if (tag == 64) {
         parse_room_creator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_creator_)));
          set_has_room_creator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_net_human_protocol.room_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_net_human_protocol.room_info)
  return false;
#undef DO_
}

void room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_net_human_protocol.room_info)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // optional int32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_count(), output);
  }

  // optional int32 room_state = 4;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_state(), output);
  }

  // optional bool orNeedPassword = 5;
  if (has_orneedpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->orneedpassword(), output);
  }

  // optional bool orShuffle = 6;
  if (has_orshuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->orshuffle(), output);
  }

  // optional string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password(), output);
  }

  // optional int32 room_creator = 8;
  if (has_room_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->room_creator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_net_human_protocol.room_info)
}

::google::protobuf::uint8* room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_net_human_protocol.room_info)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // optional int32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_count(), target);
  }

  // optional int32 room_state = 4;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_state(), target);
  }

  // optional bool orNeedPassword = 5;
  if (has_orneedpassword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->orneedpassword(), target);
  }

  // optional bool orShuffle = 6;
  if (has_orshuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->orshuffle(), target);
  }

  // optional string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  // optional int32 room_creator = 8;
  if (has_room_creator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->room_creator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_net_human_protocol.room_info)
  return target;
}

int room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional int32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }

    // optional int32 room_state = 4;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_state());
    }

    // optional bool orNeedPassword = 5;
    if (has_orneedpassword()) {
      total_size += 1 + 1;
    }

    // optional bool orShuffle = 6;
    if (has_orshuffle()) {
      total_size += 1 + 1;
    }

    // optional string password = 7;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 room_creator = 8;
    if (has_room_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_creator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_info::MergeFrom(const room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_orneedpassword()) {
      set_orneedpassword(from.orneedpassword());
    }
    if (from.has_orshuffle()) {
      set_orshuffle(from.orshuffle());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_room_creator()) {
      set_room_creator(from.room_creator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_info::CopyFrom(const room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_info::IsInitialized() const {

  return true;
}

void room_info::Swap(room_info* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(roomname_, other->roomname_);
    std::swap(player_count_, other->player_count_);
    std::swap(room_state_, other->room_state_);
    std::swap(orneedpassword_, other->orneedpassword_);
    std::swap(orshuffle_, other->orshuffle_);
    std::swap(password_, other->password_);
    std::swap(room_creator_, other->room_creator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_info_descriptor_;
  metadata.reflection = room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invitation_info::kSenderInfoFieldNumber;
const int invitation_info::kRoomIdFieldNumber;
const int invitation_info::kRoomNameFieldNumber;
const int invitation_info::kCountFieldNumber;
#endif  // !_MSC_VER

invitation_info::invitation_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_net_human_protocol.invitation_info)
}

void invitation_info::InitAsDefaultInstance() {
  senderinfo_ = const_cast< ::game_landlord_net_human_protocol::player_info*>(&::game_landlord_net_human_protocol::player_info::default_instance());
}

invitation_info::invitation_info(const invitation_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_net_human_protocol.invitation_info)
}

void invitation_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  senderinfo_ = NULL;
  roomid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invitation_info::~invitation_info() {
  // @@protoc_insertion_point(destructor:game_landlord_net_human_protocol.invitation_info)
  SharedDtor();
}

void invitation_info::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (this != default_instance_) {
    delete senderinfo_;
  }
}

void invitation_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invitation_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invitation_info_descriptor_;
}

const invitation_info& invitation_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fnet_5fhuman_5fdef_2eproto();
  return *default_instance_;
}

invitation_info* invitation_info::default_instance_ = NULL;

invitation_info* invitation_info::New() const {
  return new invitation_info;
}

void invitation_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<invitation_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, count_);
    if (has_senderinfo()) {
      if (senderinfo_ != NULL) senderinfo_->::game_landlord_net_human_protocol::player_info::Clear();
    }
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invitation_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_net_human_protocol.invitation_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_net_human_protocol.player_info senderInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_senderinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (tag == 16) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomName;
        break;
      }

      // optional string roomName = 3;
      case 3: {
        if (tag == 26) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_net_human_protocol.invitation_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_net_human_protocol.invitation_info)
  return false;
#undef DO_
}

void invitation_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_net_human_protocol.invitation_info)
  // optional .game_landlord_net_human_protocol.player_info senderInfo = 1;
  if (has_senderinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->senderinfo(), output);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional string roomName = 3;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomname(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_net_human_protocol.invitation_info)
}

::google::protobuf::uint8* invitation_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_net_human_protocol.invitation_info)
  // optional .game_landlord_net_human_protocol.player_info senderInfo = 1;
  if (has_senderinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->senderinfo(), target);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional string roomName = 3;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_net_human_protocol.invitation_info)
  return target;
}

int invitation_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_net_human_protocol.player_info senderInfo = 1;
    if (has_senderinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->senderinfo());
    }

    // optional int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string roomName = 3;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invitation_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invitation_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invitation_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invitation_info::MergeFrom(const invitation_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderinfo()) {
      mutable_senderinfo()->::game_landlord_net_human_protocol::player_info::MergeFrom(from.senderinfo());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invitation_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invitation_info::CopyFrom(const invitation_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invitation_info::IsInitialized() const {

  return true;
}

void invitation_info::Swap(invitation_info* other) {
  if (other != this) {
    std::swap(senderinfo_, other->senderinfo_);
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invitation_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invitation_info_descriptor_;
  metadata.reflection = invitation_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_landlord_net_human_protocol

// @@protoc_insertion_point(global_scope)
